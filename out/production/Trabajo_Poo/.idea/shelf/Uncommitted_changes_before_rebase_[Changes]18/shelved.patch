Index: monopoly/Casilla.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\n\r\npublic class Casilla {\r\n    //Atributos:\r\n    private String nombre; //Nombre de la casilla\r\n    private String tipo; //Tipo de casilla (Solar, Especial, Transporte, Servicios, Comunidad).\r\n    private float valor; //Valor de esa casilla (en la mayoría será valor de compra, en la casilla parking se usará como el bote).\r\n    private int posicion; //Posición que ocupa la casilla en el tablero (entero entre 1 y 40).\r\n    private Jugador duenho; //Dueño de la casilla (por defecto sería la banca).\r\n    private Grupo grupo; //Grupo al que pertenece la casilla (si es solar).\r\n    private float impuesto; //Cantidad a pagar por caer en la casilla: el alquiler en solares/servicios/transportes o impuestos.\r\n    private float hipoteca; //Valor otorgado por hipotecar una casilla\r\n    private ArrayList<Avatar> avatares; //Avatares que están situados en la casilla.\r\n    private Scanner scanner = new Scanner(System.in);\r\n\r\n    //Constructores:\r\n    public Casilla() {\r\n    }//Parámetros vacíos\r\n\r\n    /*Constructor para casillas tipo Solar, Servicios o Transporte:\r\n    * Parámetros: nombre casilla, tipo (debe ser solar, serv. o transporte), posición en el tablero, valor y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, float valor, Jugador duenho) {\r\n        this.nombre=nombre;\r\n        this.tipo=tipo;\r\n        this.posicion=posicion;\r\n        this.valor=valor;\r\n        this.duenho=duenho;\r\n    }\r\n\r\n    /*Constructor utilizado para inicializar las casillas de tipo IMPUESTOS.\r\n    * Parámetros: nombre, posición en el tablero, impuesto establecido y dueño.\r\n     */\r\n    public Casilla(String nombre, int posicion, float impuesto, Jugador duenho) {\r\n        this.nombre=nombre;\r\n        this.posicion=posicion;\r\n        this.impuesto=impuesto;\r\n        this.duenho=duenho;\r\n    }\r\n\r\n    /*Constructor utilizado para crear las otras casillas (Suerte, Caja de comunidad y Especiales):\r\n    * Parámetros: nombre, tipo de la casilla (será uno de los que queda), posición en el tablero y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, Jugador duenho) {\r\n        this.nombre=nombre;\r\n        this.tipo=tipo;\r\n        this.posicion=posicion;\r\n        this.duenho=duenho;\r\n    }\r\n    \r\n    public String getNombre(){\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre){\r\n        this.nombre = nombre;\r\n    }\r\n    \r\n    public String getTipo(){\r\n        return tipo;\r\n    }\r\n    \r\n    public void setTipo(String tipo){\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    public float getValor(){\r\n        return valor;\r\n    }\r\n\r\n    public void setValor(float valor){\r\n        this.valor = valor;\r\n    }\r\n\r\n    public int getPosicion(){\r\n        return posicion;\r\n    }\r\n\r\n    public void setPosicion(int posicion){\r\n        this.posicion = posicion;\r\n    }\r\n    public Jugador getDuenho(){\r\n        return duenho;\r\n    }\r\n    \r\n    public void setDuenho(Jugador duenho){\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public Grupo getGrupo(){ //mirar la clase grupo(puse public class en lugar de class a secas)\r\n        return grupo;\r\n    }\r\n\r\n    public void setGrupo(Grupo grupo){\r\n        this.grupo = grupo;\r\n    }\r\n\r\n    public float getImpuesto(){\r\n        return impuesto;\r\n    }\r\n\r\n    public void setImpuesto(float impuesto){\r\n        this.impuesto = impuesto;\r\n    }\r\n\r\n    public float getHipoteca(){\r\n        return hipoteca;\r\n    }\r\n\r\n    public void setHipoteca(float hipoteca){\r\n        this.hipoteca = hipoteca;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares(){\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares){ //AL SER UN ARRAY TENGO QUE ITERAR CADA UNA DE SUS POSICIONES O ASÍ ESTÁ BIEN?\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    @Override\r\n    public String toString(){\r\n        return \"tipo: \" + getTipo() + \",\\n grupo: \" + getGrupo() + \",\\n propietario: \" + getDuenho() + \",\\n valor: \" + getValor() + \",\\n alquiler: \" + \"220000\" +\r\n                \",\\n valor hotel: \" + \"1560000\" + \",\\n valor casa: \" + \"1560000\" + \",\\n valor piscina: \" + \"1040000\" + \",\\n valor pista de deportes: \"\r\n                + \"3250000\" + \",\\n alquiler de una casa: \" + \"1100000\" + \",\\n alquiler dos casas: \" + \"3300000\" +\r\n                \",\\n alquiler tres casas: \" + \"7700000\" + \",\\n alquiler cuatro casas: \" + \"11000000\" + \",\\n alquiler hotel: \" +\r\n                \"15400000\" + \",\\n alquiler piscina: \" + \"5500000\" + \",\\n alquiler pista de deporte: \" + \"5500000\";\r\n    }\r\n\r\n    //Método utilizado para añadir un avatar al array de avatares en casilla.\r\n    public void anhadirAvatar(Avatar av) {\r\n        this.avatares.add(av);\r\n    }\r\n\r\n    //Método utilizado para eliminar un avatar del array de avatares en casilla.\r\n    public void eliminarAvatar(Avatar av) {\r\n        this.avatares.remove(av);\r\n    }\r\n\r\n    /*Método para evaluar qué hacer en una casilla concreta. Parámetros:\r\n    * - Jugador cuyo avatar está en esa casilla.\r\n    * - La banca (para ciertas comprobaciones).\r\n    * - El valor de la tirada: para determinar impuesto a pagar en casillas de servicios.\r\n    * Valor devuelto: true en caso de ser solvente (es decir, de cumplir las deudas), y false\r\n    * en caso de no cumplirlas.*/\r\n    public boolean evaluarCasilla(Jugador actual, Jugador banca, int tirada) {\r\n\r\n\r\n    }\r\n\r\n    /*Método usado para comprar una casilla determinada. Parámetros:\r\n    * - Jugador que solicita la compra de la casilla.\r\n    * - Banca del monopoly (es el dueño de las casillas no compradas aún).*/\r\n\r\n    /*SOLO SE PUEDEN COMPRAR LAS CASILLAS DE TIPO SOLAR,SERVICIOS Y TRANSPORTE, Y TIENE QUE TENER DINERO SUFICIENTE EL SOLICITANTE\r\n    ,\r\n    Al solicitante hay que asignarle la propiedad, quitarle la pasta y sumarle los gastos, a la banca quitarle \r\n    la propiedad y darle la pasta y hay que asignar el nuevo dueño a la casilla, que será el solicitante\r\n    */\r\n    public void comprarCasilla(Jugador solicitante, Jugador banca) {\r\n        //Comprobamos que sea una casilla \"comprable\"\r\n        if((this.tipo==\"Solar\")||(this.tipo==\"Servicios\")||(this.tipo==\"Transporte\")){\r\n        \r\n            //JUGADOR SOLICITANTE\r\n\r\n            //\"quitar pasta\"\r\n            solicitante.setFortuna(solicitante.getFortuna()-this.valor);\r\n\r\n            //\"sumar gastos\"\r\n            solicitante.setGastos(solicitante.getGastos()+this.valor);\r\n\r\n            //\"asignarle la propiedad\"\r\n            //Primero tenemos que cambiarle el dueño a la casilla\r\n            this.duenho = solicitante;\r\n            solicitante.getPropiedades().add(this);\r\n\r\n            //BANCA, aunque realmente es innecesario\r\n            banca.setFortuna(banca.getFortuna()+this.valor);\r\n        }else{\r\n            //En caso de que no sea de ninguno de estos tipos, la propiedad no se podrá comprar\r\n            System.out.println(\"Esta propiedad no se puede comprar\\n\");\r\n        }\r\n\r\n    }\r\n\r\n    /*Método para añadir valor a una casilla. Utilidad:\r\n    * - Sumar valor a la casilla de parking.\r\n    * - Sumar valor a las casillas de solar al no comprarlas tras cuatro vueltas de todos los jugadores.\r\n    * Este método toma como argumento la cantidad a añadir del valor de la casilla.*/\r\n    public void sumarValor(float suma) {\r\n    }\r\n\r\n    /*Método para mostrar información sobre una casilla.\r\n    * Devuelve una cadena con información específica de cada tipo de casilla.*/\r\n    public String infoCasilla() {\r\n        if(scanner.equals(\"describir \" + getNombre())){\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    /* Método para mostrar información de una casilla en venta.\r\n     * Valor devuelto: texto con esa información.\r\n     */\r\n    public String casEnVenta() {\r\n    }\r\n\r\n    public String generarCasilla(int posicion){\r\n        return this.nombre;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Casilla.java b/monopoly/Casilla.java
--- a/monopoly/Casilla.java	(revision ec136a79d985828d60e7392adebd75aa73f3d59a)
+++ b/monopoly/Casilla.java	(date 1728142096736)
@@ -200,9 +200,6 @@
     /*Método para mostrar información sobre una casilla.
     * Devuelve una cadena con información específica de cada tipo de casilla.*/
     public String infoCasilla() {
-        if(scanner.equals("describir " + getNombre())){
-            System.out.println();
-        }
     }
 
     /* Método para mostrar información de una casilla en venta.
Index: monopoly/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\nimport partida.*;\r\n\r\npublic class Menu {\r\n\r\n    //Atributos\r\n    private ArrayList<Jugador> jugadores; //Jugadores de la partida.\r\n    private ArrayList<Avatar> avatares; //Avatares en la partida.\r\n    private int turno = 0; //Índice correspondiente a la posición en el arrayList del jugador (y el avatar) que tienen el turno\r\n    private int lanzamientos; //Variable para contar el número de lanzamientos de un jugador en un turno.\r\n    private Tablero tablero; //Tablero en el que se juega.\r\n    private Dado dado1; //Dos dados para lanzar y avanzar casillas.\r\n    private Dado dado2;\r\n    private Jugador banca; //El jugador banca.\r\n    private boolean tirado; //Booleano para comprobar si el jugador que tiene el turno ha tirado o no.\r\n    private boolean solvente; //Booleano para comprobar si el jugador que tiene el turno es solvente, es decir, si ha pagado sus deudas.\r\n    private boolean dadosdobles;\r\n\r\n    public Menu(){\r\n        this.jugadores = new ArrayList<Jugador>();\r\n        this.avatares = new ArrayList<Avatar>();\r\n        this.banca = new Jugador();\r\n        this.tablero = new Tablero(banca);\r\n        this.dado1 = new Dado();\r\n        this.dado2 = new Dado();\r\n    }\r\n\r\n    public ArrayList<Jugador> getJugadores(){\r\n        return jugadores;\r\n    }\r\n\r\n    public void setJugadores(ArrayList<Jugador> jugadores){\r\n        this.jugadores = jugadores;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares(){\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares){\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    public int getTurno(){\r\n        return turno;\r\n    }\r\n\r\n    public void setTurno(int turno){\r\n        this.turno = turno;\r\n    }\r\n\r\n    public int getLanzamientos(){\r\n        return lanzamientos;\r\n    }\r\n\r\n    public void setLanzamientos(int lanzamientos){\r\n        this.lanzamientos = lanzamientos;\r\n    }\r\n\r\n    public Tablero getTablero(){\r\n        return tablero;\r\n    }\r\n\r\n    public void setTablero(Tablero tablero){\r\n        this.tablero = tablero;\r\n    }\r\n\r\n    public Dado getDado1(){\r\n        return dado1;\r\n    }\r\n\r\n    public void setDado1(Dado dado1){\r\n        this.dado1 = dado1;\r\n    }\r\n\r\n    public Dado getDado2(){\r\n        return dado2;\r\n    }\r\n\r\n    public void setDado2(Dado dado2){\r\n        this.dado2 = dado2;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n\r\n    public boolean getTirado(){\r\n        return tirado;\r\n    }\r\n\r\n    public void setTirado(boolean tirado){\r\n        this.tirado = tirado;\r\n    }\r\n\r\n    public boolean getSolvente(){\r\n        return solvente;\r\n    }\r\n\r\n    public void setSolvente(boolean solvente){\r\n        this.solvente = solvente;\r\n    }\r\n\r\n    // Método para inciar una partida: crea los jugadores y avatares.\r\n    private void iniciarPartida() {\r\n        new Menu();\r\n        jugadores.add(banca);\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        String comando = scanner.nextLine();\r\n        analizarComando(comando);\r\n    }\r\n    \r\n    /*Método que interpreta el comando introducido y toma la accion correspondiente.\r\n    * Parámetro: cadena de caracteres (el comando).\r\n    */\r\n    private void analizarComando(String comando) {\r\n        String[] palabras = comando.split(\" \");\r\n\r\n    // Si el comando tiene menos de 2 palabras, no puede ser válido.\r\n    if (palabras.length < 2) {\r\n        System.out.println(\"Comando inválido.\");\r\n        return;\r\n    }\r\n\r\n    // Determinar el método (la acción que se va a realizar)\r\n    String metodo = palabras[0] + \" \" + palabras[1];\r\n\r\n    // Dependiendo del comando, la cantidad de palabras puede variar, así que manejamos posibles casos\r\n    switch (metodo) {\r\n        case \"crear jugador\":\r\n            if (palabras.length >= 3) {\r\n                String nombre = palabras[2];\r\n                new Jugador(nombre); // Suponiendo que Jugador tiene este constructor\r\n                System.out.println(\"Jugador \" + nombre + \" creado.\");\r\n            } else {\r\n                System.out.println(\"Comando incompleto para crear jugador.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir jugador\":\r\n            if (palabras.length >= 3) {\r\n                descJugador(palabras[2]); // Llama al método que describe un jugador\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir jugador.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir avatar\":\r\n            if (palabras.length >= 3) {\r\n                descAvatar(palabras[2]); // Llama al método que describe un avatar\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir avatar.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir\":\r\n            if (palabras.length >= 2) {\r\n                // Aquí puedes usar el nombre de la entidad a describir\r\n                // Por ejemplo, si es una casilla o algún otro objeto del juego\r\n                String nombreEntidad = palabras[2]; \r\n                // Lógica para describir la entidad\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir.\");\r\n            }\r\n            break;\r\n\r\n        case \"lanzar dados\":\r\n            lanzarDados(); // Método que gestiona el lanzamiento de dados\r\n            break;\r\n\r\n        default:\r\n            System.out.println(\"Comando no reconocido.\");\r\n            break;\r\n    }\r\n\r\n\r\n        /*if(metodo.equals(\"crear jugador\")){\r\n\r\n        }else if(metodo.equals(\"descJugador\")){\r\n            descJugador(palabras);\r\n        }*/\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir jugador'.\r\n    * Parámetro: comando introducido\r\n     */\r\n    private void descJugador(String[] palabras) {\r\n        for(Jugador jugador:jugadores){\r\n            if((jugador.getNombre()).equals(palabras[2])){\r\n                System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + /*listarPropiedades() +*/ \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir avatar'.\r\n    * Parámetro: id del avatar a describir.\r\n    */\r\n    private void descAvatar(String[] palabras) {\r\n        for(Avatar avatar:avatares){\r\n            if((avatar.getId()).equals(palabras[2])){\r\n                System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + /*avatar.getCasilla() +*/ \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Método que realiza las acciones asociadas al comando 'describir nombre_casilla'.\r\n    * Parámetros: nombre de la casilla a describir.\r\n    */\r\n    private void descCasilla(String nombre) {\r\n        Casilla casilla = tablero.encontrar_casilla(nombre);\r\n        System.out.println(casilla); //tengo la funcion hecha en Casilla.java\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'lanzar dados'.\r\n    private void lanzarDados() {\r\n        int contador=0;\r\n        do{\r\n            dado1.hacerTirada();\r\n            dado2.hacerTirada();\r\n\r\n            System.out.println(\"Dado 1: \"+dado1.getValor());\r\n            System.out.println(\"Dado 2: \"+dado2.getValor());\r\n            dadosdobles=dado1.equals(dado2);\r\n            if (dadosdobles) {\r\n                System.out.println(\"Sacaste dobles\");\r\n                contador++;\r\n                if (contador==3) {\r\n                    System.out.println(\"Sacaste dobles 3 veces, serás enviado a la cárcel\");\r\n                    //ircarcel\r\n                    break;\r\n                }\r\n            }else{\r\n                contador=0;\r\n                }\r\n            moverAvatar(tablero,dado1.getValor()+dado2.getValor());     \r\n        //evalur casilla\r\n\r\n    }while(dadosdobles);\r\n   }\r\n\r\n    /*Método que ejecuta todas las acciones realizadas con el comando 'comprar nombre_casilla'.\r\n    * Parámetro: cadena de caracteres con el nombre de la casilla.\r\n     */\r\n    private void comprar(String nombre) {\r\n        jugadores.get(turno)\r\n\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. \r\n    private void salirCarcel() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar enventa'.\r\n    private void listarVenta() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar jugadores'.\r\n    private void listarJugadores() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar avatares'.\r\n    private void listarAvatares() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'acabar turno'.\r\n    private void acabarTurno() {\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Menu.java b/monopoly/Menu.java
--- a/monopoly/Menu.java	(revision ec136a79d985828d60e7392adebd75aa73f3d59a)
+++ b/monopoly/Menu.java	(date 1728142096766)
@@ -251,8 +251,9 @@
     * Parámetro: cadena de caracteres con el nombre de la casilla.
      */
     private void comprar(String nombre) {
-        jugadores.get(turno)
-
+        jugadores.get(turno).setFortuna(jugadores.get(turno).getFortuna() - tablero.encontrar_casilla(nombre).getValor());
+        jugadores.get(turno).anhadirPropiedad(tablero.encontrar_casilla(nombre));
+        tablero.encontrar_casilla(nombre).setDuenho(jugadores.get(turno));
     }
 
     //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. 
