Index: partida/Jugador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package partida;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport monopoly.*;\r\n\r\npublic class Jugador {\r\n\r\n    // Atributos:\r\n    private String nombre; // Nombre del jugador\r\n    private Avatar avatar; // Avatar que tiene en la partida.\r\n    private float fortuna; // Dinero que posee.\r\n    private float gastos; // Gastos realizados a lo largo del juego.\r\n    private boolean enCarcel; // Será true si el jugador está en la carcel\r\n    private int tiradasCarcel; // Cuando está en la carcel, contará las tiradas sin éxito que ha hecho allí\r\n    // para intentar salir (se usa para limitar el numero de intentos).\r\n    private int vueltas; // Cuenta las vueltas dadas al tablero.\r\n    private ArrayList<Casilla> propiedades; // Propiedades que posee el jugador.\r\n\r\n    // Constructor vacío. Se usará para crear la banca.\r\n    public Jugador() {\r\n    }\r\n\r\n    /*\r\n     * Constructor principal. Requiere parámetros:\r\n     * Nombre del jugador, tipo del avatar que tendrá, casilla en la que empezará y\r\n     * ArrayList de\r\n     * avatares creados (usado para dos propósitos: evitar que dos jugadores tengan\r\n     * el mismo nombre y\r\n     * que dos avatares tengan mismo ID). Desde este constructor también se crea el\r\n     * avatar.\r\n     */\r\n    public Jugador(String nombre, String tipoAvatar, Casilla inicio, ArrayList<Avatar> avCreados) {\r\n        this.nombre = nombre;\r\n        this.avatar = new Avatar(tipoAvatar, this, inicio, avCreados);\r\n        this.fortuna = 9543076.28f;\r\n        this.gastos = 0;\r\n        this.enCarcel = false;\r\n        this.tiradasCarcel = 0;\r\n        this.vueltas = 0;\r\n        this.propiedades = new ArrayList<Casilla>();\r\n\r\n    }\r\n\r\n    // SETTERS Y GETTERS\r\n\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public Avatar getAvatar() {\r\n        return avatar;\r\n    }\r\n\r\n    public void setAvatar(Avatar avatar) {\r\n        this.avatar = avatar;\r\n    }\r\n\r\n    public float getFortuna() {\r\n        return fortuna;\r\n    }\r\n\r\n    public void setFortuna(float fortuna) {\r\n        this.fortuna = fortuna;\r\n    }\r\n\r\n    public float getGastos() {\r\n        return gastos;\r\n    }\r\n\r\n    public void setGastos(float gastos) {\r\n        this.gastos = gastos;\r\n    }\r\n\r\n    public boolean getEnCarcel() {\r\n        return enCarcel;\r\n    }\r\n\r\n    public void setEnCarcel(boolean enCarcel) {\r\n        this.enCarcel = enCarcel;\r\n    }\r\n\r\n    public int getTiradasCarcel() {\r\n        return tiradasCarcel;\r\n    }\r\n\r\n    public void setTiradasCarcel(int tiradasCarcel) {\r\n        this.tiradasCarcel = tiradasCarcel;\r\n    }\r\n\r\n    public int getVueltas() {\r\n        return vueltas;\r\n    }\r\n\r\n    public void setVueltas(int vueltas) {\r\n        this.vueltas = vueltas;\r\n    }\r\n\r\n    public ArrayList<Casilla> getPropiedades() {\r\n        return propiedades;\r\n    }\r\n\r\n    public void setPropiedades(ArrayList<Casilla> propiedades) {\r\n        this.propiedades = propiedades;\r\n    }\r\n\r\n    // Otros métodos:\r\n    // Método para añadir una propiedad al jugador. Como parámetro, la casilla a\r\n    // añadir.\r\n    public void anhadirPropiedad(Casilla casilla) {\r\n        propiedades.add(casilla);\r\n    }\r\n\r\n    // Método para eliminar una propiedad del arraylist de propiedades de jugador.\r\n    public void eliminarPropiedad(Casilla casilla) {\r\n        propiedades.remove(casilla);\r\n    }\r\n\r\n    // Método para añadir fortuna a un jugador\r\n    // Como parámetro se pide el valor a añadir. Si hay que restar fortuna, se\r\n    // pasaría un valor negativo.\r\n    public void sumarFortuna(float valor) {\r\n        this.fortuna += valor;\r\n    }\r\n\r\n    // Método para sumar gastos a un jugador.\r\n    // Parámetro: valor a añadir a los gastos del jugador (será el precio de un\r\n    // solar, impuestos pagados...).\r\n    public void sumarGastos(float valor) {\r\n        this.gastos += valor;\r\n    }\r\n\r\n    /*\r\n     * Método para establecer al jugador en la cárcel.\r\n     * Se requiere disponer de las casillas del tablero para ello (por eso se pasan\r\n     * como parámetro).\r\n     */\r\n    public void encarcelar(ArrayList<ArrayList<Casilla>> tablero) {\r\n        //Poner enCarcel como true.\r\n        this.enCarcel = true;\r\n        //Actualizar la casilla actual a la carcel.\r\n        this.avatar.setLugar(tablero.get(1).get(0));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partida/Jugador.java b/partida/Jugador.java
--- a/partida/Jugador.java	(revision 63256c82800091e4fd9528b11be79ad142832ad0)
+++ b/partida/Jugador.java	(date 1728143610663)
@@ -31,6 +31,7 @@
      * avatar.
      */
     public Jugador(String nombre, String tipoAvatar, Casilla inicio, ArrayList<Avatar> avCreados) {
+
         this.nombre = nombre;
         this.avatar = new Avatar(tipoAvatar, this, inicio, avCreados);
         this.fortuna = 9543076.28f;
Index: partida/Avatar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package partida;\r\n\r\nimport monopoly.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\npublic class Avatar {\r\n\r\n    // Atributos\r\n    private String id; // Identificador: una letra generada aleatoriamente.\r\n    private String tipo; // Sombrero, Esfinge, Pelota, Coche\r\n    private Jugador jugador; // Un jugador al que pertenece ese avatar.\r\n    private Casilla lugar; // Los avatares se sitúan en casillas del tablero.\r\n\r\n    // Constructor vacío\r\n    public Avatar() {\r\n    }\r\n\r\n    /*\r\n     * Constructor principal. Requiere estos parámetros:\r\n     * Tipo del avatar, jugador al que pertenece, lugar en el que estará ubicado, y\r\n     * un arraylist con los\r\n     * avatares creados (usado para crear un ID distinto del de los demás avatares).\r\n     */\r\n    public Avatar(String tipo, Jugador jugador, Casilla lugar, ArrayList<Avatar> avCreados) {\r\n        this.tipo = tipo;\r\n        this.jugador = jugador;\r\n        this.lugar = lugar;\r\n        generarId(avCreados);\r\n    }\r\n\r\n    // GETTERS\r\n\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getTipo() {\r\n        return tipo;\r\n    }\r\n\r\n    public Jugador getJugador() {\r\n        return jugador;\r\n    }\r\n\r\n    public Casilla getLugar() {\r\n        return lugar;\r\n    }\r\n\r\n    // SETTERS\r\n\r\n    public void setId(String ID) {\r\n        this.id = ID;\r\n    }\r\n\r\n    public void setTipo(String TIPO) {\r\n        this.tipo = TIPO;\r\n    }\r\n\r\n    public void setId(Jugador JUGADOR) {\r\n        this.jugador = JUGADOR;\r\n    }\r\n\r\n    public void setLugar(Casilla LUGAR) {\r\n        this.lugar = LUGAR;\r\n    }\r\n\r\n    // Método que permite mover a un avatar a una casilla concreta.\r\n    public void moverAvatar(ArrayList<ArrayList<Casilla>> tablero, int valorTirada){\r\n    /*HACER DOS FORS ANIDADOS, EL PRIMERO PARA IR RECORRIENDO CADA GRUPO DEL TABLERO POR SEPARADO Y EL SEGUNDO PARA IR RECORRIENDO LAS CASILLAS\r\n    DE CADA GRUPO E IR HACIENDO GETPOSICIO0N PARA IR COMPARANDOLA CON EL VALOR DE LA NUEVAPOSICION\r\n    */\r\n        // Obtener la posición actual del lugar del avatar\r\n        int posicionActual = lugar.getPosicion();\r\n    \r\n        // Calcula la nueva posición después de mover\r\n        int nuevaPosicion = (posicionActual + valorTirada) % 40; // Usar el módulo para asegurarte de que vuelva al inicio si excede 39\r\n\r\n        //Iteramos sobre los lados del tablero con el indice i y sobre las casillas de cada lado con el indice j:\r\n        for(int i=0;i<tablero.size();i++){\r\n            for(int j=0;j<tablero.get(i).size();j++){\r\n                if(tablero.get(i).get(j).getPosicion()==nuevaPosicion){\r\n                    lugar=tablero.get(i).get(j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Método que permite generar un ID para un avatar. Solo lo usamos en esta clase\r\n     * (por ello es privado).\r\n     * El ID generado será una letra mayúscula. Parámetros:\r\n     * - Un arraylist de los avatares ya creados, con el objetivo de evitar que se\r\n     * generen dos ID iguales.\r\n     */\r\n    private void generarId(ArrayList<Avatar> avCreados) {\r\n        Random random = new Random();\r\n        char id;\r\n\r\n        while (true) {\r\n            // Genera un ID aleatorio entre 'A' y 'Z'\r\n            id = (char) ('A' + random.nextInt(26)); // 'A' es el 65 en ASCII\r\n\r\n            boolean idExistente = false; // Inicializamos la verificación de existencia\r\n\r\n            // Comprobamos si el ID ya existe en los avatares creados usando un bucle for\r\n            // clásico\r\n            for (int i = 0; i < avCreados.size(); i++) {\r\n                if (avCreados.get(i).getId().equals(String.valueOf(id))) {\r\n                    idExistente = true; // Si existe, marcamos la bandera\r\n                    break; // Salimos del bucle\r\n                }\r\n            }\r\n\r\n            // Si el ID no existe, lo asignamos al avatar actual\r\n            if (!idExistente) {\r\n                this.id = String.valueOf(id); // Asigna el ID al atributo de la clase\r\n                break; // Salimos del bucle\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partida/Avatar.java b/partida/Avatar.java
--- a/partida/Avatar.java	(revision 63256c82800091e4fd9528b11be79ad142832ad0)
+++ b/partida/Avatar.java	(date 1728143610705)
@@ -68,7 +68,7 @@
     // Método que permite mover a un avatar a una casilla concreta.
     public void moverAvatar(ArrayList<ArrayList<Casilla>> tablero, int valorTirada){
     /*HACER DOS FORS ANIDADOS, EL PRIMERO PARA IR RECORRIENDO CADA GRUPO DEL TABLERO POR SEPARADO Y EL SEGUNDO PARA IR RECORRIENDO LAS CASILLAS
-    DE CADA GRUPO E IR HACIENDO GETPOSICIO0N PARA IR COMPARANDOLA CON EL VALOR DE LA NUEVAPOSICION
+    DE CADA GRUPO E IR HACIENDO GETPOSICION PARA IR COMPARANDOLA CON EL VALOR DE LA NUEVAPOSICION
     */
         // Obtener la posición actual del lugar del avatar
         int posicionActual = lugar.getPosicion();
Index: monopoly/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\nimport partida.*;\r\n\r\npublic class Menu {\r\n\r\n    //Atributos\r\n    private ArrayList<Jugador> jugadores; //Jugadores de la partida.\r\n    private ArrayList<Avatar> avatares; //Avatares en la partida.\r\n    private int turno = 0; //Índice correspondiente a la posición en el arrayList del jugador (y el avatar) que tienen el turno\r\n    private int lanzamientos; //Variable para contar el número de lanzamientos de un jugador en un turno.\r\n    private Tablero tablero; //Tablero en el que se juega.\r\n    private Dado dado1; //Dos dados para lanzar y avanzar casillas.\r\n    private Dado dado2;\r\n    private Jugador banca; //El jugador banca.\r\n    private boolean tirado; //Booleano para comprobar si el jugador que tiene el turno ha tirado o no.\r\n    private boolean solvente; //Booleano para comprobar si el jugador que tiene el turno es solvente, es decir, si ha pagado sus deudas.\r\n    private boolean dadosdobles;\r\n\r\n    public Menu(){\r\n        this.jugadores = new ArrayList<Jugador>();\r\n        this.avatares = new ArrayList<Avatar>();\r\n        this.banca = new Jugador();\r\n        this.tablero = new Tablero(banca);\r\n        this.dado1 = new Dado();\r\n        this.dado2 = new Dado();\r\n    }\r\n\r\n    public ArrayList<Jugador> getJugadores(){\r\n        return jugadores;\r\n    }\r\n\r\n    public void setJugadores(ArrayList<Jugador> jugadores){\r\n        this.jugadores = jugadores;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares(){\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares){\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    public int getTurno(){\r\n        return turno;\r\n    }\r\n\r\n    public void setTurno(int turno){\r\n        this.turno = turno;\r\n    }\r\n\r\n    public int getLanzamientos(){\r\n        return lanzamientos;\r\n    }\r\n\r\n    public void setLanzamientos(int lanzamientos){\r\n        this.lanzamientos = lanzamientos;\r\n    }\r\n\r\n    public Tablero getTablero(){\r\n        return tablero;\r\n    }\r\n\r\n    public void setTablero(Tablero tablero){\r\n        this.tablero = tablero;\r\n    }\r\n\r\n    public Dado getDado1(){\r\n        return dado1;\r\n    }\r\n\r\n    public void setDado1(Dado dado1){\r\n        this.dado1 = dado1;\r\n    }\r\n\r\n    public Dado getDado2(){\r\n        return dado2;\r\n    }\r\n\r\n    public void setDado2(Dado dado2){\r\n        this.dado2 = dado2;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n\r\n    public boolean getTirado(){\r\n        return tirado;\r\n    }\r\n\r\n    public void setTirado(boolean tirado){\r\n        this.tirado = tirado;\r\n    }\r\n\r\n    public boolean getSolvente(){\r\n        return solvente;\r\n    }\r\n\r\n    public void setSolvente(boolean solvente){\r\n        this.solvente = solvente;\r\n    }\r\n\r\n    // Método para inciar una partida: crea los jugadores y avatares.\r\n    private void iniciarPartida() {\r\n        new Menu();\r\n        jugadores.add(banca);\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        String comando = scanner.nextLine();\r\n        analizarComando(comando);\r\n    }\r\n    \r\n    /*Método que interpreta el comando introducido y toma la accion correspondiente.\r\n    * Parámetro: cadena de caracteres (el comando).\r\n    */\r\n    private void analizarComando(String comando) {\r\n        String[] palabras = comando.split(\" \");\r\n\r\n    // Si el comando tiene menos de 2 palabras, no puede ser válido.\r\n    if (palabras.length < 2) {\r\n        System.out.println(\"Comando inválido.\");\r\n        return;\r\n    }\r\n\r\n    // Determinar el método (la acción que se va a realizar)\r\n    String metodo = palabras[0] + \" \" + palabras[1];\r\n\r\n    // Dependiendo del comando, la cantidad de palabras puede variar, así que manejamos posibles casos\r\n    switch (metodo) {\r\n        case \"crear jugador\":\r\n            if (palabras.length >= 3) {\r\n                String nombre = palabras[2];\r\n                new Jugador(nombre); // Suponiendo que Jugador tiene este constructor\r\n                System.out.println(\"Jugador \" + nombre + \" creado.\");\r\n            } else {\r\n                System.out.println(\"Comando incompleto para crear jugador.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir jugador\":\r\n            if (palabras.length >= 3) {\r\n                descJugador(palabras[2]); // Llama al método que describe un jugador\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir jugador.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir avatar\":\r\n            if (palabras.length >= 3) {\r\n                descAvatar(palabras[2]); // Llama al método que describe un avatar\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir avatar.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir\":\r\n            if (palabras.length >= 2) {\r\n                // Aquí puedes usar el nombre de la entidad a describir\r\n                // Por ejemplo, si es una casilla o algún otro objeto del juego\r\n                String nombreEntidad = palabras[2]; \r\n                // Lógica para describir la entidad\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir.\");\r\n            }\r\n            break;\r\n\r\n        case \"lanzar dados\":\r\n            lanzarDados(); // Método que gestiona el lanzamiento de dados\r\n            break;\r\n\r\n        default:\r\n            System.out.println(\"Comando no reconocido.\");\r\n            break;\r\n    }\r\n\r\n\r\n        /*if(metodo.equals(\"crear jugador\")){\r\n\r\n        }else if(metodo.equals(\"descJugador\")){\r\n            descJugador(palabras);\r\n        }*/\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir jugador'.\r\n    * Parámetro: comando introducido\r\n     */\r\n    private void descJugador(String[] palabras) {\r\n        for(Jugador jugador:jugadores){\r\n            if((jugador.getNombre()).equals(palabras[2])){\r\n                System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir avatar'.\r\n    * Parámetro: id del avatar a describir.\r\n    */\r\n    private void descAvatar(String[] palabras) {\r\n        for(Avatar avatar:avatares){\r\n            if((avatar.getId()).equals(palabras[2])){\r\n                System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + /*avatar.getCasilla() +*/ \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Método que realiza las acciones asociadas al comando 'describir nombre_casilla'.\r\n    * Parámetros: nombre de la casilla a describir.\r\n    */\r\n    private void descCasilla(String nombre) {\r\n        Casilla casilla = tablero.encontrar_casilla(nombre);\r\n        System.out.println(casilla); //tengo la funcion hecha en Casilla.java\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'lanzar dados'.\r\n    private void lanzarDados() {\r\n        if (tirado) {\r\n            System.out.println(\"Ya has lanzado los dados en este turno.\");\r\n            return;\r\n        }\r\n        \r\n        dado1.hacerTirada();\r\n        dado2.hacerTirada();\r\n\r\n        System.out.println(\"Dado 1: \" + dado1.getValor());\r\n        System.out.println(\"Dado 2: \" + dado2.getValor());\r\n\r\n        int sumaDados = dado1.getValor() + dado2.getValor();\r\n        dadosdobles = dado1.equals(dado2);\r\n\r\n    \r\n        if (jugadores.get(turno).getEnCarcel()) {\r\n            if (dadosdobles) {\r\n                System.out.println(\"Has sacado dobles y sales de la cárcel.\");\r\n                jugadores.get(turno).setEnCarcel(false);\r\n            } else {\r\n                jugadores.get(turno).setTiradasCarcel(jugadores.get(turno).getTiradasCarcel() + 1);\r\n                    if (jugadores.get(turno).getTiradasCarcel() >= 3) {\r\n                        System.out.println(\"Has fallado 3 veces.\");\r\n                        jugadores.get(turno).setEnCarcel(false); // Sale de la cárcel después de pagar\r\n                    }\r\n                tirado = true;\r\n                return;\r\n        }\r\n    }\r\n\r\n    \r\n    Avatar avatarActual = jugadores.get(turno).getAvatar();\r\n    avatarActual.moverAvatar(tablero.getPosiciones(), sumaDados);\r\n\r\n    // Verificar si el jugador ha dado la vuelta al tablero\r\n    if (avatarActual.getLugar().getPosicion() < sumaDados) {\r\n        jugadores.get(turno).setVueltas(jugadores.get(turno).getVueltas() + 1);\r\n        System.out.println(\"¡Has pasado por la casilla de salida! Recibes tu recompensa.\");\r\n        jugadores.get(turno).sumarFortuna(200); // Suponiendo que reciben 200 por pasar la salida\r\n    }\r\n\r\n    // Evaluar la casilla en la que ha caído\r\n    // Aquí puedes incluir la lógica para evaluar la casilla (si es propiedad, pagar renta, etc.)\r\n\r\n    tirado = true; // El jugador ya ha lanzado los dados en este turno\r\n\r\n    // Si sacó dobles, puede volver a tirar\r\n    if (dadosdobles) {\r\n        System.out.println(\"Has sacado dobles, puedes lanzar de nuevo.\");\r\n        tirado = false; // Permitir volver a tirar\r\n        lanzamientos++;\r\n\r\n        // Si sacó dobles 3 veces, va a la cárcel\r\n        if (lanzamientos == 3) {\r\n            System.out.println(\"Has sacado dobles 3 veces seguidas, vas a la cárcel.\");\r\n            jugadores.get(turno).encarcelar(tablero.getPosiciones());\r\n            tirado = true;\r\n        }\r\n    } else {\r\n        lanzamientos = 0; // Resetear el contador de lanzamientos dobles\r\n    }\r\n}\r\n\r\n    /*Método que ejecuta todas las acciones realizadas con el comando 'comprar nombre_casilla'.\r\n    * Parámetro: cadena de caracteres con el nombre de la casilla.\r\n     */\r\n    private void comprar(String nombre) {\r\n        jugadores.get(turno).setFortuna(jugadores.get(turno).getFortuna() - tablero.encontrar_casilla(nombre).getValor());\r\n        jugadores.get(turno).anhadirPropiedad(tablero.encontrar_casilla(nombre));\r\n        tablero.encontrar_casilla(nombre).setDuenho(jugadores.get(turno));\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. \r\n    private void salirCarcel() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar enventa'.\r\n    private void listarVenta() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar jugadores'.\r\n    private void listarJugadores() {\r\n        for(Jugador jugador:jugadores){\r\n            System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n        }\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar avatares'.\r\n    private void listarAvatares() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'acabar turno'.\r\n    private void acabarTurno() {\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Menu.java b/monopoly/Menu.java
--- a/monopoly/Menu.java	(revision 63256c82800091e4fd9528b11be79ad142832ad0)
+++ b/monopoly/Menu.java	(date 1728144169993)
@@ -258,9 +258,15 @@
 
     // Verificar si el jugador ha dado la vuelta al tablero
     if (avatarActual.getLugar().getPosicion() < sumaDados) {
-        jugadores.get(turno).setVueltas(jugadores.get(turno).getVueltas() + 1);
-        System.out.println("¡Has pasado por la casilla de salida! Recibes tu recompensa.");
-        jugadores.get(turno).sumarFortuna(200); // Suponiendo que reciben 200 por pasar la salida
+        if(avatarActual.getLugar().getNombre().equals("ircarcel")){
+            System.out.println("Has caído en la carcel.\n");
+            jugadores.get(turno).encarcelar(tablero.getPosiciones());
+            jugadores.get(turno).setEnCarcel(true);
+        }else{
+            jugadores.get(turno).setVueltas(jugadores.get(turno).getVueltas() + 1);
+            System.out.println("¡Has pasado por la casilla de salida! Recibes tu recompensa.\n");
+            jugadores.get(turno).sumarFortuna(200); // Suponiendo que reciben 200 por pasar la salida
+        }
     }
 
     // Evaluar la casilla en la que ha caído
@@ -296,6 +302,7 @@
 
     //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. 
     private void salirCarcel() {
+        jugadores.get(turno).setEnCarcel(false);
     }
 
     // Método que realiza las acciones asociadas al comando 'listar enventa'.
