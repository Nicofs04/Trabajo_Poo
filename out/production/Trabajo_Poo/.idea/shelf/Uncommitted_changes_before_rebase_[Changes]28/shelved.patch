Index: monopoly/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\nimport partida.*;\r\n\r\npublic class Menu {\r\n\r\n    //Atributos\r\n    private ArrayList<Jugador> jugadores; //Jugadores de la partida.\r\n    private ArrayList<Avatar> avatares; //Avatares en la partida.\r\n    private int turno = 0; //Índice correspondiente a la posición en el arrayList del jugador (y el avatar) que tienen el turno\r\n    private int lanzamientos; //Variable para contar el número de lanzamientos de un jugador en un turno.\r\n    private Tablero tablero; //Tablero en el que se juega.\r\n    private Dado dado1; //Dos dados para lanzar y avanzar casillas.\r\n    private Dado dado2;\r\n    private Jugador banca; //El jugador banca.\r\n    private boolean tirado; //Booleano para comprobar si el jugador que tiene el turno ha tirado o no.\r\n    private boolean solvente; //Booleano para comprobar si el jugador que tiene el turno es solvente, es decir, si ha pagado sus deudas.\r\n    private boolean dadosdobles;\r\n\r\n    public Menu(){\r\n        this.jugadores = new ArrayList<Jugador>();\r\n        this.avatares = new ArrayList<Avatar>();\r\n        this.banca = new Jugador();\r\n        this.tablero = new Tablero(banca);\r\n        this.dado1 = new Dado();\r\n        this.dado2 = new Dado();\r\n    }\r\n\r\n    public ArrayList<Jugador> getJugadores(){\r\n        return jugadores;\r\n    }\r\n\r\n    public void setJugadores(ArrayList<Jugador> jugadores){\r\n        this.jugadores = jugadores;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares(){\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares){\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    public int getTurno(){\r\n        return turno;\r\n    }\r\n\r\n    public void setTurno(int turno){\r\n        this.turno = turno;\r\n    }\r\n\r\n    public int getLanzamientos(){\r\n        return lanzamientos;\r\n    }\r\n\r\n    public void setLanzamientos(int lanzamientos){\r\n        this.lanzamientos = lanzamientos;\r\n    }\r\n\r\n    public Tablero getTablero(){\r\n        return tablero;\r\n    }\r\n\r\n    public void setTablero(Tablero tablero){\r\n        this.tablero = tablero;\r\n    }\r\n\r\n    public Dado getDado1(){\r\n        return dado1;\r\n    }\r\n\r\n    public void setDado1(Dado dado1){\r\n        this.dado1 = dado1;\r\n    }\r\n\r\n    public Dado getDado2(){\r\n        return dado2;\r\n    }\r\n\r\n    public void setDado2(Dado dado2){\r\n        this.dado2 = dado2;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n\r\n    public boolean getTirado(){\r\n        return tirado;\r\n    }\r\n\r\n    public void setTirado(boolean tirado){\r\n        this.tirado = tirado;\r\n    }\r\n\r\n    public boolean getSolvente(){\r\n        return solvente;\r\n    }\r\n\r\n    public void setSolvente(boolean solvente){\r\n        this.solvente = solvente;\r\n    }\r\n\r\n    public boolean getDadosdobles(){\r\n        return dadosdobles;\r\n    }\r\n\r\n    public void setDadosdobles(boolean dadosdobles){\r\n        this.dadosdobles = dadosdobles;\r\n    }\r\n\r\n    // Método para inciar una partida: crea los jugadores y avatares.\r\n    private void iniciarPartida() {\r\n        new Menu();\r\n        jugadores.add(banca);\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        String comando = scanner.nextLine();\r\n        analizarComando(comando);\r\n    }\r\n    \r\n    /*Método que interpreta el comando introducido y toma la accion correspondiente.\r\n    * Parámetro: cadena de caracteres (el comando).\r\n    */\r\n    private void analizarComando(String comando) {\r\n        String[] palabras = comando.split(\" \");\r\n\r\n    // Si el comando tiene menos de 2 palabras, no puede ser válido.\r\n    if (palabras.length < 2) {\r\n        System.out.println(\"Comando inválido.\");\r\n        return;\r\n    }\r\n\r\n    // Determinar el método (la acción que se va a realizar)\r\n    String metodo = palabras[0] + \" \" + palabras[1];\r\n\r\n    // Dependiendo del comando, la cantidad de palabras puede variar, así que manejamos posibles casos\r\n    switch (metodo) {\r\n        case \"crear jugador\":\r\n            if (palabras.length >= 3) {\r\n                String nombre = palabras[2];\r\n                new Jugador(nombre); // Suponiendo que Jugador tiene este constructor\r\n                System.out.println(\"Jugador \" + nombre + \" creado.\");\r\n            } else {\r\n                System.out.println(\"Comando incompleto para crear jugador.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir jugador\":\r\n            if (palabras.length >= 3) {\r\n                descJugador(palabras[2]); // Llama al método que describe un jugador\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir jugador.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir avatar\":\r\n            if (palabras.length >= 3) {\r\n                descAvatar(palabras[2]); // Llama al método que describe un avatar\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir avatar.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir\":\r\n            if (palabras.length >= 2) {\r\n                // Aquí puedes usar el nombre de la entidad a describir\r\n                // Por ejemplo, si es una casilla o algún otro objeto del juego\r\n                String nombreEntidad = palabras[2]; \r\n                // Lógica para describir la entidad\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir.\");\r\n            }\r\n            break;\r\n\r\n        case \"lanzar dados\":\r\n            lanzarDados(); // Método que gestiona el lanzamiento de dados\r\n            break;\r\n\r\n        default:\r\n            System.out.println(\"Comando no reconocido.\");\r\n            break;\r\n    }\r\n\r\n\r\n        /*if(metodo.equals(\"crear jugador\")){\r\n\r\n        }else if(metodo.equals(\"descJugador\")){\r\n            descJugador(palabras);\r\n        }*/\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir jugador'.\r\n    * Parámetro: comando introducido\r\n     */\r\n    private void descJugador(String[] palabras) {\r\n        for(Jugador jugador:jugadores){\r\n            if((jugador.getNombre()).equals(palabras[2])){\r\n                System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir avatar'.\r\n    * Parámetro: id del avatar a describir.\r\n    */\r\n    private void descAvatar(String[] palabras) {\r\n        for(Avatar avatar:avatares){\r\n            if((avatar.getId()).equals(palabras[2])){\r\n                System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + avatar.getLugar() + \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Método que realiza las acciones asociadas al comando 'describir nombre_casilla'.\r\n    * Parámetros: nombre de la casilla a describir.\r\n    */\r\n    private void descCasilla(String nombre) {\r\n        Casilla casilla = tablero.encontrar_casilla(nombre);\r\n        System.out.println(casilla); //tengo la funcion hecha en Casilla.java\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'lanzar dados'.\r\n    private void lanzarDados() {\r\n        if (getTirado()) {\r\n            System.out.println(\"Ya has lanzado los dados en este turno.\");\r\n            return;\r\n        }\r\n        \r\n        dado1.hacerTirada();\r\n        dado2.hacerTirada();\r\n\r\n        System.out.println(\"Dado 1: \" + dado1.getValor());\r\n        System.out.println(\"Dado 2: \" + dado2.getValor());\r\n\r\n        int sumaDados = dado1.getValor() + dado2.getValor();\r\n        setDadosdobles(dado1.equals(dado2));\r\n\r\n    \r\n        if (jugadores.get(turno).getEnCarcel()) {\r\n            if (getDadosdobles()) {\r\n                System.out.println(\"Has sacado dobles y sales de la cárcel.\");\r\n                jugadores.get(turno).setEnCarcel(false);\r\n            } else {\r\n                jugadores.get(turno).setTiradasCarcel(jugadores.get(turno).getTiradasCarcel() + 1);\r\n                    if (jugadores.get(turno).getTiradasCarcel() >= 3) {\r\n                        System.out.println(\"Has fallado 3 veces.\");\r\n                        jugadores.get(turno).setEnCarcel(false); // Sale de la cárcel después de pagar\r\n                    }\r\n                setTirado(true);\r\n                return;\r\n        }\r\n    }\r\n\r\n    \r\n    Avatar avatarActual = jugadores.get(turno).getAvatar();\r\n    avatarActual.moverAvatar(tablero.getPosiciones(), sumaDados);\r\n\r\n    // Verificar si el jugador ha dado la vuelta al tablero\r\n    if (avatarActual.getLugar().getPosicion() < sumaDados) {\r\n        if(avatarActual.getLugar().getNombre().equals(\"ircarcel\")){\r\n            System.out.println(\"Has caído en la carcel.\\n\");\r\n            jugadores.get(turno).encarcelar(tablero.getPosiciones());\r\n            jugadores.get(turno).setEnCarcel(true);\r\n        }else{\r\n            jugadores.get(turno).setVueltas(jugadores.get(turno).getVueltas() + 1);\r\n            System.out.println(\"¡Has pasado por la casilla de salida! Recibes tu recompensa.\\n\");\r\n            jugadores.get(turno).sumarFortuna(200); // Suponiendo que reciben 200 por pasar la salida\r\n        }\r\n    }\r\n\r\n    // Evaluar la casilla en la que ha caído\r\n    // Aquí puedes incluir la lógica para evaluar la casilla (si es propiedad, pagar renta, etc.)\r\n\r\n    setTirado(true); // El jugador ya ha lanzado los dados en este turno\r\n\r\n    // Si sacó dobles, puede volver a tirar\r\n    if (getDadosdobles()) {\r\n        System.out.println(\"Has sacado dobles, puedes lanzar de nuevo.\");\r\n        setTirado(false); // Permitir volver a tirar\r\n        setLanzamientos(getLanzamientos()+1);\r\n\r\n        // Si sacó dobles 3 veces, va a la cárcel\r\n        if (getLanzamientos() == 3) {\r\n            System.out.println(\"Has sacado dobles 3 veces seguidas, vas a la cárcel.\");\r\n            jugadores.get(turno).encarcelar(tablero.getPosiciones());\r\n            setTirado(true);\r\n        }\r\n    } else {\r\n        setLanzamientos(0); // Resetear el contador de lanzamientos dobles\r\n    }\r\n}\r\n\r\n    /*Método que ejecuta todas las acciones realizadas con el comando 'comprar nombre_casilla'.\r\n    * Parámetro: cadena de caracteres con el nombre de la casilla.\r\n     */\r\n    private void comprar(String nombre) {\r\n        jugadores.get(turno).setFortuna(jugadores.get(turno).getFortuna() - tablero.encontrar_casilla(nombre).getValor());\r\n        jugadores.get(turno).anhadirPropiedad(tablero.encontrar_casilla(nombre));\r\n        tablero.encontrar_casilla(nombre).setDuenho(jugadores.get(turno));\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. \r\n    private void salirCarcel() {\r\n        jugadores.get(turno).setEnCarcel(false);\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar enventa'.\r\n    private void listarVenta() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar jugadores'.\r\n    private void listarJugadores() {\r\n        for(Jugador jugador:jugadores){\r\n            System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n        }\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar avatares'.\r\n    private void listarAvatares() {\r\n        for(Avatar avatar:avatares){\r\n            System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + avatar.getLugar() + \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n        }\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'acabar turno'.\r\n    private void acabarTurno() {\r\n        \r\n        turno++;\r\n\r\n        if (turno>jugadores.size()-1) {\r\n            turno=0;\r\n        }\r\n\r\n        setTirado(false);\r\n        setLanzamientos(0);\r\n        setDadosdobles(false);\r\n        if (jugadores.get(turno).getFortuna()<0) {\r\n            setSolvente(false);\r\n        }else{\r\n            setSolvente(false);\r\n        }\r\n\r\n        System.out.println(\"El turno actual será de:\"+jugadores.get(turno+1).getNombre());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Menu.java b/monopoly/Menu.java
--- a/monopoly/Menu.java	(revision 15c523964ea703e7621dc95322abdb4190b81474)
+++ b/monopoly/Menu.java	(date 1728146299882)
@@ -349,6 +349,6 @@
             setSolvente(false);
         }
 
-        System.out.println("El turno actual será de:"+jugadores.get(turno+1).getNombre());
+        System.out.println("El turno actual será de:" + jugadores.get(turno+1).getNombre());
     }
 }
