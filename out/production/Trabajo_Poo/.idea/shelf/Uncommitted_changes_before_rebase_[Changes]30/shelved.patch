Index: monopoly/Casilla.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Casilla {\r\n    // Atributos:\r\n    private String nombre; // Nombre de la casilla\r\n    private String tipo; // Tipo de casilla (Solar, Especial, Transporte, Servicios, Comunidad).\r\n    private float valor; // Valor de esa casilla (en la mayoría será valor de compra, en la casilla\r\n                         // parking se usará como el bote).\r\n    private int posicion; // Posición que ocupa la casilla en el tablero (entero entre 1 y 40).\r\n    private Jugador duenho; // Dueño de la casilla (por defecto sería la banca).\r\n    private Grupo grupo; // Grupo al que pertenece la casilla (si es solar).\r\n    private float impuesto; // Cantidad a pagar por caer en la casilla: el alquiler en\r\n                            // solares/servicios/transportes o impuestos.\r\n    private float hipoteca; // Valor otorgado por hipotecar una casilla\r\n    private ArrayList<Avatar> avatares; // Avatares que están situados en la casilla.\r\n    private Scanner scanner = new Scanner(System.in);\r\n\r\n    // Constructores:\r\n    public Casilla() {\r\n    }// Parámetros vacíos\r\n\r\n    /*\r\n     * Constructor para casillas tipo Solar, Servicios o Transporte:\r\n     * Parámetros: nombre casilla, tipo (debe ser solar, serv. o transporte),\r\n     * posición en el tablero, valor y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, float valor, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.valor = valor;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para inicializar las casillas de tipo IMPUESTOS.\r\n     * Parámetros: nombre, posición en el tablero, impuesto establecido y dueño.\r\n     */\r\n    public Casilla(String nombre, int posicion, float impuesto, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.posicion = posicion;\r\n        this.impuesto = impuesto;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para crear las otras casillas (Suerte, Caja de\r\n     * comunidad y Especiales):\r\n     * Parámetros: nombre, tipo de la casilla (será uno de los que queda), posición\r\n     * en el tablero y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public String getTipo() {\r\n        return tipo;\r\n    }\r\n\r\n    public void setTipo(String tipo) {\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    public float getValor() {\r\n        return valor;\r\n    }\r\n\r\n    public void setValor(float valor) {\r\n        this.valor = valor;\r\n    }\r\n\r\n    public int getPosicion() {\r\n        return posicion;\r\n    }\r\n\r\n    public void setPosicion(int posicion) {\r\n        this.posicion = posicion;\r\n    }\r\n\r\n    public Jugador getDuenho() {\r\n        return duenho;\r\n    }\r\n\r\n    public void setDuenho(Jugador duenho) {\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public Grupo getGrupo() { // mirar la clase grupo(puse public class en lugar de class a secas)\r\n        return grupo;\r\n    }\r\n\r\n    public void setGrupo(Grupo grupo) {\r\n        this.grupo = grupo;\r\n    }\r\n\r\n    public float getImpuesto() {\r\n        return impuesto;\r\n    }\r\n\r\n    public void setImpuesto(float impuesto) {\r\n        this.impuesto = impuesto;\r\n    }\r\n\r\n    public float getHipoteca() {\r\n        return hipoteca;\r\n    }\r\n\r\n    public void setHipoteca(float hipoteca) {\r\n        this.hipoteca = hipoteca;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares() {\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares) { // AL SER UN ARRAY TENGO QUE ITERAR CADA UNA DE SUS POSICIONES\r\n                                                          // O ASÍ ESTÁ BIEN?\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"tipo: \" + getTipo() + \",\\n grupo: \" + getGrupo() + \",\\n propietario: \" + getDuenho() + \",\\n valor: \"\r\n                + getValor() + \",\\n alquiler: \" + \"220000\" +\r\n                \",\\n valor hotel: \" + \"1560000\" + \",\\n valor casa: \" + \"1560000\" + \",\\n valor piscina: \" + \"1040000\"\r\n                + \",\\n valor pista de deportes: \"\r\n                + \"3250000\" + \",\\n alquiler de una casa: \" + \"1100000\" + \",\\n alquiler dos casas: \" + \"3300000\" +\r\n                \",\\n alquiler tres casas: \" + \"7700000\" + \",\\n alquiler cuatro casas: \" + \"11000000\"\r\n                + \",\\n alquiler hotel: \" +\r\n                \"15400000\" + \",\\n alquiler piscina: \" + \"5500000\" + \",\\n alquiler pista de deporte: \" + \"5500000\";\r\n    }\r\n\r\n    // Método utilizado para añadir un avatar al array de avatares en casilla.\r\n    public void anhadirAvatar(Avatar av) {\r\n        this.avatares.add(av);\r\n    }\r\n\r\n    // Método utilizado para eliminar un avatar del array de avatares en casilla.\r\n    public void eliminarAvatar(Avatar av) {\r\n        this.avatares.remove(av);\r\n    }\r\n\r\n    /*\r\n     * Método para evaluar qué hacer en una casilla concreta. Parámetros:\r\n     * - Jugador cuyo avatar está en esa casilla.\r\n     * - La banca (para ciertas comprobaciones).\r\n     * - El valor de la tirada: para determinar impuesto a pagar en casillas de\r\n     * servicios.\r\n     * Valor devuelto: true en caso de ser solvente (es decir, de cumplir las\r\n     * deudas), y false\r\n     * en caso de no cumplirlas.\r\n     */\r\n    public boolean evaluarCasilla(Jugador actual, Jugador banca, int tirada) {\r\n\r\n    }\r\n\r\n    /*\r\n     * Método usado para comprar una casilla determinada. Parámetros:\r\n     * - Jugador que solicita la compra de la casilla.\r\n     * - Banca del monopoly (es el dueño de las casillas no compradas aún).\r\n     */\r\n\r\n    /*\r\n     * SOLO SE PUEDEN COMPRAR LAS CASILLAS DE TIPO SOLAR,SERVICIOS Y TRANSPORTE,\r\n     * TIENE QUE TENER DINERO SUFICIENTE EL SOLICITANTE, y el dueño tiene que ser la\r\n     * banca\r\n     * ,\r\n     * Al solicitante hay que asignarle la propiedad, quitarle la pasta y sumarle\r\n     * los gastos, a la banca quitarle\r\n     * la propiedad y darle la pasta y hay que asignar el nuevo dueño a la casilla,\r\n     * que será el solicitante\r\n     */\r\n    public void comprarCasilla(Jugador solicitante, Jugador banca) {\r\n        // Comprobamos que sea una casilla \"comprable\"\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))\r\n                && (solicitante.getFortuna() >= this.valor) && (this.duenho == banca)) {\r\n\r\n            // JUGADOR SOLICITANTE\r\n\r\n            // \"quitar pasta\"\r\n            solicitante.setFortuna(solicitante.getFortuna() - this.valor);\r\n\r\n            // \"sumar gastos\"\r\n            solicitante.setGastos(solicitante.getGastos() + this.valor);\r\n\r\n            // \"asignarle la propiedad\"\r\n            // Primero tenemos que cambiarle el dueño a la casilla\r\n            this.duenho = solicitante;\r\n            solicitante.getPropiedades().add(this);\r\n\r\n            // BANCA, aunque realmente es innecesario\r\n            banca.setFortuna(banca.getFortuna() + this.valor);\r\n\r\n            System.out.println(\"El jugador \" + solicitante.getNombre() + \"compra la casilla \"\r\n                    + solicitante.getAvatar().getLugar().getNombre() + \"por \" + this.valor);\r\n            System.out.println(\"Su fortuna actual es:\" + solicitante.getFortuna());\r\n\r\n        } else if ((this.tipo != \"Solar\") && (this.tipo != \"Servicios\") && (this.tipo != \"Transporte\")) {\r\n            // En caso de que no sea de ninguno de estos tipos, la propiedad no se podrá\r\n            // comprar\r\n            System.out.println(\r\n                    \"Esta propiedad no se puede comprar, para poder comprar una propiedad debe de ser de uno de los siguientes tipos: SOLAR, TRANSPORTE, SERVICIOS\\n\");\r\n        } else {\r\n            System.out.println(\"No tienes dinero suficiente como para comprar esta propiedad\\n\");\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * Método para añadir valor a una casilla. Utilidad:\r\n     * - Sumar valor a la casilla de parking.\r\n     * - Sumar valor a las casillas de solar al no comprarlas tras cuatro vueltas de\r\n     * todos los jugadores.\r\n     * Este método toma como argumento la cantidad a añadir del valor de la casilla.\r\n     */\r\n\r\n    // Si la casilla en la que cae el avatar es Parking, entonces deberá de recibir\r\n    // el bote almacenado por el pago de impuestos o tasas.\r\n    public void sumarValor(float suma) {\r\n    }\r\n\r\n    /*\r\n     * Método para mostrar información sobre una casilla.\r\n     * Devuelve una cadena con información específica de cada tipo de casilla.\r\n     */\r\n    public String infoCasilla() {\r\n    }\r\n\r\n    /*\r\n     * Método para mostrar información de una casilla en venta.\r\n     * Valor devuelto: texto con esa información.\r\n     */\r\n    public String casEnVenta() {\r\n        // Para mostrar la informacion tiene que estar en venta, y para estar en venta,\r\n        // el dueño tiene que ser la banca y cumplir los requisitos del primer if de\r\n        // \"comprarCasilla\"\r\n        // DOY POR HECHO QUE EL JUGADOR BANCA DE LLAMA \"Banca\", si no habría que pasarle\r\n        // la banca como parámetro a la función\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))&& (this.duenho.getNombre() == \"Banca\")) {\r\n            if(this.tipo==\"Solar\"){\r\n                System.out.println(\"Nombre de la casilla a la venta: \"+this.nombre);\r\n                System.out.println(\"Tipo de la casilla a la venta: \"+this.tipo);\r\n                System.out.println(\"Valor de la casilla a la venta: \"+this.valor);\r\n                System.out.println(\"Posicion de la casilla a la venta: \"+this.posicion);\r\n                System.out.println(\"Nombre del dueño de la casilla: \"+this.duenho.getNombre());\r\n                System.out.println(\"Grupo de la casilla a la venta: \"+this.grupo.getColorGrupo());\r\n                System.out.println(\"Impuesto por caer en la casilla: \"+this.impuesto);\r\n                System.out.println(\"Valor de hipoteca \"+this.hipoteca);\r\n\r\n                System.out.println(\"Avatares en la casilla:\");\r\n                for(int i=0;i<this.avatares.size();i++){\r\n                    System.out.println(\"Avatar\"+i+\":\"+this.avatares.get(i).getId());\r\n                }\r\n\r\n            }else{\r\n                System.out.println(\"Nombre de la casilla a la venta: \"+this.nombre);\r\n                System.out.println(\"Tipo de la casilla a la venta: \"+this.tipo);\r\n                System.out.println(\"Valor de la casilla a la venta: \"+this.valor);\r\n                System.out.println(\"Posicion de la casilla a la venta: \"+this.posicion);\r\n                System.out.println(\"Nombre del dueño de la casilla: \"+this.duenho.getNombre());\r\n                System.out.println(\"Impuesto por caer en la casilla: \"+this.impuesto);\r\n                System.out.println(\"Valor de hipoteca \"+this.hipoteca);\r\n                for(int i=0;i<this.avatares.size();i++){\r\n                    System.out.println(\"Avatar\"+i+\":\"+this.avatares.get(i).getId());\r\n                }\r\n            }\r\n\r\n        }else{\r\n            String.format(\"Esta casilla no está a la venta\\n\");\r\n        }\r\n    }\r\n\r\n\r\n    public String generarCasilla(int posicion) {\r\n        return this.nombre;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Casilla.java b/monopoly/Casilla.java
--- a/monopoly/Casilla.java	(revision b6fba30b1b6920e3c570de3adaff8c6a56b2423e)
+++ b/monopoly/Casilla.java	(date 1728147156214)
@@ -128,8 +128,7 @@
         return avatares;
     }
 
-    public void setAvatares(ArrayList<Avatar> avatares) { // AL SER UN ARRAY TENGO QUE ITERAR CADA UNA DE SUS POSICIONES
-                                                          // O ASÍ ESTÁ BIEN?
+    public void setAvatares(ArrayList<Avatar> avatares) {
         this.avatares = avatares;
     }
 
@@ -251,20 +250,20 @@
         // "comprarCasilla"
         // DOY POR HECHO QUE EL JUGADOR BANCA DE LLAMA "Banca", si no habría que pasarle
         // la banca como parámetro a la función
-        if (((this.tipo == "Solar") || (this.tipo == "Servicios") || (this.tipo == "Transporte"))&& (this.duenho.getNombre() == "Banca")) {
+        if (((this.tipo == "Solar") || (this.tipo == "Servicios") || (this.tipo == "Transporte")) && (this.duenho.getNombre() == "Banca")) {
             if(this.tipo=="Solar"){
-                System.out.println("Nombre de la casilla a la venta: "+this.nombre);
-                System.out.println("Tipo de la casilla a la venta: "+this.tipo);
-                System.out.println("Valor de la casilla a la venta: "+this.valor);
-                System.out.println("Posicion de la casilla a la venta: "+this.posicion);
-                System.out.println("Nombre del dueño de la casilla: "+this.duenho.getNombre());
-                System.out.println("Grupo de la casilla a la venta: "+this.grupo.getColorGrupo());
-                System.out.println("Impuesto por caer en la casilla: "+this.impuesto);
-                System.out.println("Valor de hipoteca "+this.hipoteca);
-
-                System.out.println("Avatares en la casilla:");
-                for(int i=0;i<this.avatares.size();i++){
-                    System.out.println("Avatar"+i+":"+this.avatares.get(i).getId());
+                StringBuilder sb = new StringBuilder();
+                sb.append(String.format("Nombre de la casilla a la venta: %s", this.getNombre()));
+                sb.append(String.format("Tipo de la casilla a la venta: %s", this.getTipo()));
+                sb.append(String.format("Valor de la casilla a la venta: %s", this.getValor()));
+                sb.append(String.format("Posición de la casilla a la venta: %s", this.getPosicion()));
+                sb.append(String.format("Nombre del dueño de la casilla: %s", this.getDuenho()));
+                sb.append(String.format("Grupo de la casilla a la venta: %s", this.getColorGrupo()));
+                sb.append(String.format("Impuesto por caer en la casilla: %s", this.getImpuesto()));
+                sb.append(String.format("Valor de hipoteca: %s", this.getHipoteca()));
+                sb.append(String.format("Avatares: "));
+                for(Avatar avatar:avatares){
+                    sb.append(String.format("%s ", avatar.getId()));
                 }
 
             }else{
