Index: monopoly/Casilla.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Casilla {\r\n    // Atributos:\r\n    private String nombre; // Nombre de la casilla\r\n    private String tipo; // Tipo de casilla (Solar, Especial, Transporte, Servicios, Comunidad).\r\n    private float valor; // Valor de esa casilla (en la mayoría será valor de compra, en la casilla\r\n                         // parking se usará como el bote).\r\n    private int posicion; // Posición que ocupa la casilla en el tablero (entero entre 1 y 40).\r\n    private Jugador duenho; // Dueño de la casilla (por defecto sería la banca).\r\n    private Grupo grupo; // Grupo al que pertenece la casilla (si es solar).\r\n    private float impuesto; // Cantidad a pagar por caer en la casilla: el alquiler en\r\n                            // solares/servicios/transportes o impuestos.\r\n    private float hipoteca; // Valor otorgado por hipotecar una casilla\r\n    private ArrayList<Avatar> avatares; // Avatares que están situados en la casilla.\r\n    private Scanner scanner = new Scanner(System.in);\r\n\r\n    // Constructores:\r\n    public Casilla() {\r\n    }// Parámetros vacíos\r\n\r\n    /*\r\n     * Constructor para casillas tipo Solar, Servicios o Transporte:\r\n     * Parámetros: nombre casilla, tipo (debe ser solar, serv. o transporte),\r\n     * posición en el tablero, valor y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, float valor, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.valor = valor;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para inicializar las casillas de tipo IMPUESTOS.\r\n     * Parámetros: nombre, posición en el tablero, impuesto establecido y dueño.\r\n     */\r\n    public Casilla(String nombre, int posicion, float impuesto, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.posicion = posicion;\r\n        this.impuesto = impuesto;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para crear las otras casillas (Suerte, Caja de\r\n     * comunidad y Especiales):\r\n     * Parámetros: nombre, tipo de la casilla (será uno de los que queda), posición\r\n     * en el tablero y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public String getTipo() {\r\n        return tipo;\r\n    }\r\n\r\n    public void setTipo(String tipo) {\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    public float getValor() {\r\n        return valor;\r\n    }\r\n\r\n    public void setValor(float valor) {\r\n        this.valor = valor;\r\n    }\r\n\r\n    public int getPosicion() {\r\n        return posicion;\r\n    }\r\n\r\n    public void setPosicion(int posicion) {\r\n        this.posicion = posicion;\r\n    }\r\n\r\n    public Jugador getDuenho() {\r\n        return duenho;\r\n    }\r\n\r\n    public void setDuenho(Jugador duenho) {\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public Grupo getGrupo() { // mirar la clase grupo(puse public class en lugar de class a secas)\r\n        return grupo;\r\n    }\r\n\r\n    public void setGrupo(Grupo grupo) {\r\n        this.grupo = grupo;\r\n    }\r\n\r\n    public float getImpuesto() {\r\n        return impuesto;\r\n    }\r\n\r\n    public void setImpuesto(float impuesto) {\r\n        this.impuesto = impuesto;\r\n    }\r\n\r\n    public float getHipoteca() {\r\n        return hipoteca;\r\n    }\r\n\r\n    public void setHipoteca(float hipoteca) {\r\n        this.hipoteca = hipoteca;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares() {\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares) { // AL SER UN ARRAY TENGO QUE ITERAR CADA UNA DE SUS POSICIONES\r\n                                                          // O ASÍ ESTÁ BIEN?\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"tipo: \" + getTipo() + \",\\n grupo: \" + getGrupo() + \",\\n propietario: \" + getDuenho() + \",\\n valor: \"\r\n                + getValor() + \",\\n alquiler: \" + \"220000\" +\r\n                \",\\n valor hotel: \" + \"1560000\" + \",\\n valor casa: \" + \"1560000\" + \",\\n valor piscina: \" + \"1040000\"\r\n                + \",\\n valor pista de deportes: \"\r\n                + \"3250000\" + \",\\n alquiler de una casa: \" + \"1100000\" + \",\\n alquiler dos casas: \" + \"3300000\" +\r\n                \",\\n alquiler tres casas: \" + \"7700000\" + \",\\n alquiler cuatro casas: \" + \"11000000\"\r\n                + \",\\n alquiler hotel: \" +\r\n                \"15400000\" + \",\\n alquiler piscina: \" + \"5500000\" + \",\\n alquiler pista de deporte: \" + \"5500000\";\r\n    }\r\n\r\n    // Método utilizado para añadir un avatar al array de avatares en casilla.\r\n    public void anhadirAvatar(Avatar av) {\r\n        this.avatares.add(av);\r\n    }\r\n\r\n    // Método utilizado para eliminar un avatar del array de avatares en casilla.\r\n    public void eliminarAvatar(Avatar av) {\r\n        this.avatares.remove(av);\r\n    }\r\n\r\n    /*\r\n     * Método para evaluar qué hacer en una casilla concreta. Parámetros:\r\n     * - Jugador cuyo avatar está en esa casilla.\r\n     * - La banca (para ciertas comprobaciones).\r\n     * - El valor de la tirada: para determinar impuesto a pagar en casillas de\r\n     * servicios.\r\n     * Valor devuelto: true en caso de ser solvente (es decir, de cumplir las\r\n     * deudas), y false\r\n     * en caso de no cumplirlas.\r\n     */\r\n    public boolean evaluarCasilla(Jugador actual, Jugador banca, int tirada) {\r\n\r\n    }\r\n\r\n    /*\r\n     * Método usado para comprar una casilla determinada. Parámetros:\r\n     * - Jugador que solicita la compra de la casilla.\r\n     * - Banca del monopoly (es el dueño de las casillas no compradas aún).\r\n     */\r\n\r\n    /*\r\n     * SOLO SE PUEDEN COMPRAR LAS CASILLAS DE TIPO SOLAR,SERVICIOS Y TRANSPORTE,\r\n     * TIENE QUE TENER DINERO SUFICIENTE EL SOLICITANTE, y el dueño tiene que ser la\r\n     * banca\r\n     * ,\r\n     * Al solicitante hay que asignarle la propiedad, quitarle la pasta y sumarle\r\n     * los gastos, a la banca quitarle\r\n     * la propiedad y darle la pasta y hay que asignar el nuevo dueño a la casilla,\r\n     * que será el solicitante\r\n     */\r\n    public void comprarCasilla(Jugador solicitante, Jugador banca) {\r\n        // Comprobamos que sea una casilla \"comprable\"\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))\r\n                && (solicitante.getFortuna() >= this.valor) && (this.duenho == banca)) {\r\n\r\n            // JUGADOR SOLICITANTE\r\n\r\n            // \"quitar pasta\"\r\n            solicitante.setFortuna(solicitante.getFortuna() - this.valor);\r\n\r\n            // \"sumar gastos\"\r\n            solicitante.setGastos(solicitante.getGastos() + this.valor);\r\n\r\n            // \"asignarle la propiedad\"\r\n            // Primero tenemos que cambiarle el dueño a la casilla\r\n            this.duenho = solicitante;\r\n            solicitante.getPropiedades().add(this);\r\n\r\n            // BANCA, aunque realmente es innecesario\r\n            banca.setFortuna(banca.getFortuna() + this.valor);\r\n\r\n            System.out.println(\"El jugador \" + solicitante.getNombre() + \"compra la casilla \"\r\n                    + solicitante.getAvatar().getLugar().getNombre() + \"por \" + this.valor);\r\n            System.out.println(\"Su fortuna actual es:\" + solicitante.getFortuna());\r\n\r\n        } else if ((this.tipo != \"Solar\") && (this.tipo != \"Servicios\") && (this.tipo != \"Transporte\")) {\r\n            // En caso de que no sea de ninguno de estos tipos, la propiedad no se podrá\r\n            // comprar\r\n            System.out.println(\r\n                    \"Esta propiedad no se puede comprar, para poder comprar una propiedad debe de ser de uno de los siguientes tipos: SOLAR, TRANSPORTE, SERVICIOS\\n\");\r\n        } else {\r\n            System.out.println(\"No tienes dinero suficiente como para comprar esta propiedad\\n\");\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * Método para añadir valor a una casilla. Utilidad:\r\n     * - Sumar valor a la casilla de parking.\r\n     * - Sumar valor a las casillas de solar al no comprarlas tras cuatro vueltas de\r\n     * todos los jugadores.\r\n     * Este método toma como argumento la cantidad a añadir del valor de la casilla.\r\n     */\r\n\r\n    // Si la casilla en la que cae el avatar es Parking, entonces deberá de recibir\r\n    // el bote almacenado por el pago de impuestos o tasas.\r\n    public void sumarValor(float suma) {\r\n    }\r\n\r\n    /*\r\n     * Método para mostrar información sobre una casilla.\r\n     * Devuelve una cadena con información específica de cada tipo de casilla.\r\n     */\r\n    public String infoCasilla() {\r\n        StringBuilder info = new StringBuilder();\r\n    \r\n        if (this.tipo.equals(\"Solar\")) {\r\n            info.append(\"Nombre de la casilla: \").append(this.nombre).append(\"\\n\");\r\n            info.append(\"Tipo de la casilla: \").append(this.tipo).append(\"\\n\");\r\n            info.append(\"Valor de la casilla: \").append(this.valor).append(\"\\n\");\r\n            info.append(\"Posición de la casilla: \").append(this.posicion).append(\"\\n\");\r\n            info.append(\"Nombre del dueño de la casilla: \").append(this.duenho.getNombre()).append(\"\\n\");\r\n            info.append(\"Grupo de la casilla: \").append(this.grupo.getColorGrupo()).append(\"\\n\");\r\n            info.append(\"Impuesto por caer en la casilla: \").append(this.impuesto).append(\"\\n\");\r\n            info.append(\"Valor de hipoteca: \").append(this.hipoteca).append(\"\\n\");\r\n    \r\n            info.append(\"Avatares en la casilla:\\n\");\r\n            for (int i = 0; i < this.avatares.size(); i++) {\r\n                info.append(\"Avatar \").append(i).append(\": \").append(this.avatares.get(i).getId()).append(\"\\n\");\r\n            }\r\n    \r\n        } else {\r\n            info.append(\"Nombre de la casilla: \").append(this.nombre).append(\"\\n\");\r\n            info.append(\"Tipo de la casilla: \").append(this.tipo).append(\"\\n\");\r\n            info.append(\"Valor de la casilla: \").append(this.valor).append(\"\\n\");\r\n            info.append(\"Posición de la casilla: \").append(this.posicion).append(\"\\n\");\r\n            info.append(\"Nombre del dueño de la casilla: \").append(this.duenho.getNombre()).append(\"\\n\");\r\n            info.append(\"Impuesto por caer en la casilla: \").append(this.impuesto).append(\"\\n\");\r\n            info.append(\"Valor de hipoteca: \").append(this.hipoteca).append(\"\\n\");\r\n    \r\n            info.append(\"Avatares en la casilla:\\n\");\r\n            for (int i = 0; i < this.avatares.size(); i++) {\r\n                info.append(\"Avatar \").append(i).append(\": \").append(this.avatares.get(i).getId()).append(\"\\n\");\r\n            }\r\n        }\r\n    \r\n        return info.toString();\r\n    }\r\n    \r\n\r\n    /*\r\n     * Método para mostrar información de una casilla en venta.\r\n     * Valor devuelto: texto con esa información.\r\n     */\r\n    public String casEnVenta() {\r\n        // Para mostrar la informacion tiene que estar en venta, y para estar en venta,\r\n        // el dueño tiene que ser la banca y cumplir los requisitos del primer if de\r\n        // \"comprarCasilla\"\r\n        // DOY POR HECHO QUE EL JUGADOR BANCA DE LLAMA \"Banca\", si no habría que pasarle\r\n        // la banca como parámetro a la función\r\n        StringBuilder sb = new StringBuilder();\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))&& (this.duenho.getNombre() == \"Banca\")) {\r\n            if(this.tipo==\"Solar\"){\r\n\r\n                sb.append(String.format(\"Nombre de la casilla a la venta: %s\", this.getNombre()));\r\n                sb.append(String.format(\"Tipo de la casilla a la venta: %s\", this.getTipo()));\r\n                sb.append(String.format(\"Valor de la casilla a la venta: %s\", this.getValor()));\r\n                sb.append(String.format(\"Posición de la casilla a la venta: %s\", this.getPosicion()));\r\n                sb.append(String.format(\"Nombre del dueño de la casilla: %s\", this.getDuenho().getNombre()));\r\n                sb.append(String.format(\"Grupo de la casilla a la venta: %s\", this.getColorGrupo()));\r\n                sb.append(String.format(\"Impuesto por caer en la casilla: %s\", this.getImpuesto()));\r\n                sb.append(String.format(\"Valor de hipoteca: %s\", this.getHipoteca()));\r\n                sb.append(String.format(\"Avatares: \"));\r\n                for(Avatar avatar:avatares){\r\n                    sb.append(String.format(\"%s\\t\", avatar.getId()));\r\n                }\r\n            }else{\r\n                sb.append(String.format(\"Nombre de la casilla a la venta: %s\", this.getNombre()));\r\n                sb.append(String.format(\"Tipo de la casilla a la venta: %s\", this.getTipo()));\r\n                sb.append(String.format(\"Valor de la casilla a la venta: %s\", this.getValor()));\r\n                sb.append(String.format(\"Posición de la casilla a la venta: %s\", this.getPosicion()));\r\n                sb.append(String.format(\"Nombre del dueño de la casilla: %s\", this.getDuenho().getNombre()));\r\n                sb.append(String.format(\"Impuesto por caer en la casilla: %s\", this.getImpuesto()));\r\n                sb.append(String.format(\"Valor de hipoteca: %s\", this.getHipoteca()));\r\n                sb.append(String.format(\"Avatares: \"));\r\n                for(Avatar avatar:avatares){\r\n                    sb.append(String.format(\"%s\\t\"));\r\n                }\r\n            }\r\n\r\n        }else{\r\n            String.format(\"Esta casilla no está a la venta\\n\");\r\n        }\r\n    }\r\n\r\n\r\n    public String generarCasilla(int posicion) {\r\n        return this.nombre;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Casilla.java b/monopoly/Casilla.java
--- a/monopoly/Casilla.java	(revision b1493376eee5fdb739297502474db0f331b26548)
+++ b/monopoly/Casilla.java	(date 1728239723543)
@@ -134,7 +134,7 @@
     }
 
     @Override
-    public String toString() {
+    public String toString() { falta poner si es delujo o parking...
         return "tipo: " + getTipo() + ",\n grupo: " + getGrupo() + ",\n propietario: " + getDuenho() + ",\n valor: "
                 + getValor() + ",\n alquiler: " + "220000" +
                 ",\n valor hotel: " + "1560000" + ",\n valor casa: " + "1560000" + ",\n valor piscina: " + "1040000"
@@ -318,6 +318,7 @@
         }else{
             String.format("Esta casilla no está a la venta\n");
         }
+        return sb.toString();
     }
 
 
Index: monopoly/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\nimport partida.*;\r\n\r\npublic class Menu {\r\n\r\n    //Atributos\r\n    private ArrayList<Jugador> jugadores; //Jugadores de la partida.\r\n    private ArrayList<Avatar> avatares; //Avatares en la partida.\r\n    private int turno = 0; //Índice correspondiente a la posición en el arrayList del jugador (y el avatar) que tienen el turno\r\n    private int lanzamientos; //Variable para contar el número de lanzamientos de un jugador en un turno.\r\n    private Tablero tablero; //Tablero en el que se juega.\r\n    private Dado dado1; //Dos dados para lanzar y avanzar casillas.\r\n    private Dado dado2;\r\n    private Jugador banca; //El jugador banca.\r\n    private boolean tirado; //Booleano para comprobar si el jugador que tiene el turno ha tirado o no.\r\n    private boolean solvente; //Booleano para comprobar si el jugador que tiene el turno es solvente, es decir, si ha pagado sus deudas.\r\n    private boolean dadosdobles;\r\n\r\n    public Menu(){\r\n        this.jugadores = new ArrayList<Jugador>();\r\n        this.avatares = new ArrayList<Avatar>();\r\n        this.banca = new Jugador();\r\n        this.tablero = new Tablero(banca);\r\n        this.dado1 = new Dado();\r\n        this.dado2 = new Dado();\r\n    }\r\n\r\n    public ArrayList<Jugador> getJugadores(){\r\n        return jugadores;\r\n    }\r\n\r\n    public void setJugadores(ArrayList<Jugador> jugadores){\r\n        this.jugadores = jugadores;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares(){\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares){\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    public int getTurno(){\r\n        return turno;\r\n    }\r\n\r\n    public void setTurno(int turno){\r\n        this.turno = turno;\r\n    }\r\n\r\n    public int getLanzamientos(){\r\n        return lanzamientos;\r\n    }\r\n\r\n    public void setLanzamientos(int lanzamientos){\r\n        this.lanzamientos = lanzamientos;\r\n    }\r\n\r\n    public Tablero getTablero(){\r\n        return tablero;\r\n    }\r\n\r\n    public void setTablero(Tablero tablero){\r\n        this.tablero = tablero;\r\n    }\r\n\r\n    public Dado getDado1(){\r\n        return dado1;\r\n    }\r\n\r\n    public void setDado1(Dado dado1){\r\n        this.dado1 = dado1;\r\n    }\r\n\r\n    public Dado getDado2(){\r\n        return dado2;\r\n    }\r\n\r\n    public void setDado2(Dado dado2){\r\n        this.dado2 = dado2;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n\r\n    public boolean getTirado(){\r\n        return tirado;\r\n    }\r\n\r\n    public void setTirado(boolean tirado){\r\n        this.tirado = tirado;\r\n    }\r\n\r\n    public boolean getSolvente(){\r\n        return solvente;\r\n    }\r\n\r\n    public void setSolvente(boolean solvente){\r\n        this.solvente = solvente;\r\n    }\r\n\r\n    public boolean getDadosdobles(){\r\n        return dadosdobles;\r\n    }\r\n\r\n    public void setDadosdobles(boolean dadosdobles){\r\n        this.dadosdobles = dadosdobles;\r\n    }\r\n\r\n    // Método para inciar una partida: crea los jugadores y avatares.\r\n    private void iniciarPartida() {\r\n        new Menu();\r\n        avatares = new ArrayList<Avatar>();\r\n        jugadores = new ArrayList<Jugador>();\r\n\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        String comando = scanner.nextLine();\r\n        analizarComando(comando);\r\n    }\r\n    \r\n    /*Método que interpreta el comando introducido y toma la accion correspondiente.\r\n    * Parámetro: cadena de caracteres (el comando).\r\n    */\r\n    private void analizarComando(String comando) {\r\n        String[] palabras = comando.split(\" \");\r\n\r\n    // Si no hay palabras suficientes, no es un comando válido\r\n    if (palabras.length < 1) {\r\n        System.out.println(\"Comando inválido.\");\r\n        return;\r\n    }\r\n\r\n    String metodo = palabras[0];\r\n\r\n    switch (metodo) {\r\n        case \"crear\":\r\n            if (palabras.length >= 4 && palabras[1].equals(\"jugador\")) {\r\n                String nombre = palabras[2];\r\n                String tipoAvatar = palabras[3];\r\n                Jugador jugador= new Jugador(nombre, tipoAvatar, tablero.getPosiciones().get(0).get(0), avatares);\r\n                jugadores.add(jugador);\r\n            } else {\r\n                System.out.println(\"Comando incompleto o incorrecto para crear jugador.\");\r\n            }\r\n            break;\r\n\r\n        case \"jugador\":\r\n            jugadores.get(turno).getNombre(); // Método que indica el jugador con el turno actual\r\n            break;\r\n\r\n        case \"listar\":\r\n            if (palabras.length >= 2) {\r\n                if (palabras[1].equals(\"jugadores\")) {\r\n                    listarJugadores(); // Listar jugadores\r\n                } else if (palabras[1].equals(\"avatares\")) {\r\n                    listarAvatares(); // Listar avatares\r\n                } else {\r\n                    System.out.println(\"Comando desconocido para listar.\");\r\n                }\r\n            } else {\r\n                System.out.println(\"Comando incompleto para listar.\");\r\n            }\r\n            break;\r\n\r\n        case \"lanzar\":\r\n            if (palabras.length == 2 && palabras[1].equals(\"dados\")) {\r\n                lanzarDados(); // Método que gestiona el lanzamiento de dados\r\n            } else {\r\n                System.out.println(\"Comando incorrecto para lanzar dados.\");\r\n            }\r\n            break;\r\n\r\n        case \"acabar\":\r\n            if (palabras.length == 2 && palabras[1].equals(\"turno\")) {\r\n                acabarTurno(); // Método que finaliza el turno actual\r\n            } else {\r\n                System.out.println(\"Comando incorrecto para acabar turno.\");\r\n            }\r\n            break;\r\n\r\n        case \"salir\":\r\n            if (palabras.length == 3 && palabras[1].equals(\"carcel\")) {\r\n                salirCarcel(); // Método para salir de la cárcel\r\n            } else {\r\n                System.out.println(\"Comando incorrecto para salir de la cárcel.\");\r\n            }\r\n            break;\r\n\r\n        case \"describir\":\r\n            if (palabras.length == 2) {\r\n                String nombreCasilla = palabras[1];\r\n                descCasilla(nombreCasilla); // Método para describir una casilla\r\n            } else {\r\n                System.out.println(\"Comando incompleto para describir casilla.\");\r\n            }\r\n            break;\r\n\r\n        case \"comprar\":\r\n            if (palabras.length == 2) {\r\n                String nombreCasilla = palabras[1];\r\n                comprar(nombreCasilla); // Método para comprar una propiedad\r\n            } else {\r\n                System.out.println(\"Comando incompleto para comprar propiedad.\");\r\n            }\r\n            break;\r\n\r\n        case \"listar propiedadesenventa\":\r\n            listarVenta(); // Método para listar propiedades en venta\r\n            break;\r\n\r\n        case \"vertablero\":\r\n            tablero.toString(); // Método para visualizar el tablero\r\n            break;\r\n\r\n        default:\r\n            System.out.println(\"Comando no reconocido.\");\r\n            break;\r\n    }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir jugador'.\r\n    * Parámetro: comando introducido\r\n     */\r\n    private void descJugador(String[] palabras) {\r\n        for(Jugador jugador:jugadores){\r\n            if((jugador.getNombre()).equals(palabras[2])){\r\n                System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir avatar'.\r\n    * Parámetro: id del avatar a describir.\r\n    */\r\n    private void descAvatar(String[] palabras) {\r\n        for(Avatar avatar:avatares){\r\n            if((avatar.getId()).equals(palabras[2])){\r\n                System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + avatar.getLugar() + \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Método que realiza las acciones asociadas al comando 'describir nombre_casilla'.\r\n    * Parámetros: nombre de la casilla a describir.\r\n    */\r\n    private void descCasilla(String nombre) {\r\n        Casilla casilla = tablero.encontrar_casilla(nombre);\r\n        System.out.println(casilla); //tengo la funcion hecha en Casilla.java\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'lanzar dados'.\r\n    private void lanzarDados() {\r\n        if (getTirado()) {\r\n            System.out.println(\"Ya has lanzado los dados en este turno.\");\r\n            return;\r\n        }\r\n        \r\n        dado1.hacerTirada();\r\n        dado2.hacerTirada();\r\n\r\n        System.out.println(\"Dado 1: \" + dado1.getValor());\r\n        System.out.println(\"Dado 2: \" + dado2.getValor());\r\n\r\n        int sumaDados = dado1.getValor() + dado2.getValor();\r\n        setDadosdobles(dado1.equals(dado2));\r\n\r\n    \r\n        if (jugadores.get(turno).getEnCarcel()) {\r\n            if (getDadosdobles()) {\r\n                System.out.println(\"Has sacado dobles y sales de la cárcel.\");\r\n                jugadores.get(turno).setEnCarcel(false);\r\n            } else {\r\n                jugadores.get(turno).setTiradasCarcel(jugadores.get(turno).getTiradasCarcel() + 1);\r\n                    if (jugadores.get(turno).getTiradasCarcel() >= 3) {\r\n                        System.out.println(\"Has fallado 3 veces.\");\r\n                        jugadores.get(turno).setEnCarcel(false); // Sale de la cárcel después de pagar\r\n                    }\r\n                setTirado(true);\r\n                return;\r\n        }\r\n    }\r\n\r\n    \r\n    Avatar avatarActual = jugadores.get(turno).getAvatar();\r\n    avatarActual.moverAvatar(tablero.getPosiciones(), sumaDados);\r\n\r\n    // Verificar si el jugador ha dado la vuelta al tablero\r\n    if (avatarActual.getLugar().getPosicion() < sumaDados) {\r\n        if(avatarActual.getLugar().getNombre().equals(\"ircarcel\")){\r\n            System.out.println(\"Has caído en la carcel.\\n\");\r\n            jugadores.get(turno).encarcelar(tablero.getPosiciones());\r\n            jugadores.get(turno).setEnCarcel(true);\r\n        }else{\r\n            jugadores.get(turno).setVueltas(jugadores.get(turno).getVueltas() + 1);\r\n            System.out.println(\"¡Has pasado por la casilla de salida! Recibes tu recompensa.\\n\");\r\n            jugadores.get(turno).sumarFortuna(200); // Suponiendo que reciben 200 por pasar la salida\r\n        }\r\n    }\r\n\r\n    // Evaluar la casilla en la que ha caído\r\n    // Aquí puedes incluir la lógica para evaluar la casilla (si es propiedad, pagar renta, etc.)\r\n\r\n    setTirado(true); // El jugador ya ha lanzado los dados en este turno\r\n\r\n    // Si sacó dobles, puede volver a tirar\r\n    if (getDadosdobles()) {\r\n        System.out.println(\"Has sacado dobles, puedes lanzar de nuevo.\");\r\n        setTirado(false); // Permitir volver a tirar\r\n        setLanzamientos(getLanzamientos()+1);\r\n\r\n        // Si sacó dobles 3 veces, va a la cárcel\r\n        if (getLanzamientos() == 3) {\r\n            System.out.println(\"Has sacado dobles 3 veces seguidas, vas a la cárcel.\");\r\n            jugadores.get(turno).encarcelar(tablero.getPosiciones());\r\n            setTirado(true);\r\n        }\r\n    } else {\r\n        setLanzamientos(0); // Resetear el contador de lanzamientos dobles\r\n    }\r\n}\r\n\r\n    /*Método que ejecuta todas las acciones realizadas con el comando 'comprar nombre_casilla'.\r\n    * Parámetro: cadena de caracteres con el nombre de la casilla.\r\n     */\r\n    private void comprar(String nombre) {\r\n        jugadores.get(turno).setFortuna(jugadores.get(turno).getFortuna() - tablero.encontrar_casilla(nombre).getValor());\r\n        jugadores.get(turno).anhadirPropiedad(tablero.encontrar_casilla(nombre));\r\n        tablero.encontrar_casilla(nombre).setDuenho(jugadores.get(turno));\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. \r\n    private void salirCarcel() {\r\n        jugadores.get(turno).setEnCarcel(false);\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar enventa'.\r\n    private void listarVenta() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar jugadores'.\r\n    private void listarJugadores() {\r\n        for(Jugador jugador:jugadores){\r\n            System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n        }\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar avatares'.\r\n    private void listarAvatares() {\r\n        for(Avatar avatar:avatares){\r\n            System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + avatar.getLugar() + \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n        }\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'acabar turno'.\r\n    private void acabarTurno() {\r\n        \r\n        turno++;\r\n\r\n        if (turno>jugadores.size()-1) {\r\n            turno=0;\r\n        }\r\n\r\n        setTirado(false);\r\n        setLanzamientos(0);\r\n        setDadosdobles(false);\r\n        if (jugadores.get(turno).getFortuna()<0) {\r\n            setSolvente(false);\r\n        }else{\r\n            setSolvente(false);\r\n        }\r\n\r\n        System.out.println(\"El turno actual será de:\" + jugadores.get(turno+1).getNombre());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Menu.java b/monopoly/Menu.java
--- a/monopoly/Menu.java	(revision b1493376eee5fdb739297502474db0f331b26548)
+++ b/monopoly/Menu.java	(date 1728239783271)
@@ -138,7 +138,6 @@
     // Si no hay palabras suficientes, no es un comando válido
     if (palabras.length < 1) {
         System.out.println("Comando inválido.");
-        return;
     }
 
     String metodo = palabras[0];
@@ -150,81 +149,87 @@
                 String tipoAvatar = palabras[3];
                 Jugador jugador= new Jugador(nombre, tipoAvatar, tablero.getPosiciones().get(0).get(0), avatares);
                 jugadores.add(jugador);
+                System.out.println("Jugador creado con éxito.\n");
             } else {
-                System.out.println("Comando incompleto o incorrecto para crear jugador.");
+                System.out.println("Comando incompleto o incorrecto para crear jugador.\n");
             }
             break;
-
         case "jugador":
-            jugadores.get(turno).getNombre(); // Método que indica el jugador con el turno actual
+            System.out.println(jugadores.get(turno).getNombre());
+            System.out.println(jugadores.get(turno).getAvatar());
             break;
-
         case "listar":
-            if (palabras.length >= 2) {
+            if (palabras.length == 2) {
                 if (palabras[1].equals("jugadores")) {
-                    listarJugadores(); // Listar jugadores
+                    listarJugadores();
                 } else if (palabras[1].equals("avatares")) {
-                    listarAvatares(); // Listar avatares
+                    listarAvatares();
                 } else {
-                    System.out.println("Comando desconocido para listar.");
+                    System.out.println("Error, comando desconocido.\n");
                 }
             } else {
-                System.out.println("Comando incompleto para listar.");
+                System.out.println("Error, comando desconocido.\n");
             }
             break;
-
         case "lanzar":
             if (palabras.length == 2 && palabras[1].equals("dados")) {
-                lanzarDados(); // Método que gestiona el lanzamiento de dados
+                lanzarDados();
             } else {
-                System.out.println("Comando incorrecto para lanzar dados.");
+                System.out.println("Error, comando desconocido.\n");
             }
             break;
-
         case "acabar":
             if (palabras.length == 2 && palabras[1].equals("turno")) {
-                acabarTurno(); // Método que finaliza el turno actual
+                acabarTurno();
             } else {
-                System.out.println("Comando incorrecto para acabar turno.");
+                System.out.println("Error, comando desconocido.\n");
             }
             break;
-
         case "salir":
-            if (palabras.length == 3 && palabras[1].equals("carcel")) {
-                salirCarcel(); // Método para salir de la cárcel
+            if (palabras.length == 2 && palabras[1].equals("carcel")) {
+                salirCarcel();
             } else {
-                System.out.println("Comando incorrecto para salir de la cárcel.");
+                System.out.println("Error, comando desconocido.\n");
             }
             break;
-
         case "describir":
             if (palabras.length == 2) {
                 String nombreCasilla = palabras[1];
-                descCasilla(nombreCasilla); // Método para describir una casilla
-            } else {
-                System.out.println("Comando incompleto para describir casilla.");
+                descCasilla(nombreCasilla);
+            }else if(palabras.length == 3){
+                if(palabras[1].equals("jugador")){
+                    String[] nombreJugador = new String[]{palabras[2]};
+                    descJugador(nombreJugador);
+                }else if(palabras[1].equals("avatar")){
+                    String[] idAvatar = new String[]{palabras[2]};
+                    descAvatar(idAvatar);
+                }
+            }else {
+                System.out.println("Error, comando desconocido.\n");
             }
             break;
-
         case "comprar":
             if (palabras.length == 2) {
                 String nombreCasilla = palabras[1];
-                comprar(nombreCasilla); // Método para comprar una propiedad
+                comprar(nombreCasilla);
             } else {
-                System.out.println("Comando incompleto para comprar propiedad.");
+                System.out.println("Error, comando desconocido.\n");
             }
             break;
 
-        case "listar propiedadesenventa":
-            listarVenta(); // Método para listar propiedades en venta
+        default:
+            System.out.println("Error, comando desconocido.\n");
             break;
+    }
 
-        case "vertablero":
-            tablero.toString(); // Método para visualizar el tablero
-            break;
-
-        default:
-            System.out.println("Comando no reconocido.");
+    metodo = palabras[0] + " " + palabras[1]; //para comandos distintos
+
+    switch (metodo){
+        case "listar enventa":
+            listarVenta();
+            break;
+        case "ver tablero":
+            System.out.println(tablero.toString());
             break;
     }
     }
@@ -337,6 +342,7 @@
         jugadores.get(turno).setFortuna(jugadores.get(turno).getFortuna() - tablero.encontrar_casilla(nombre).getValor());
         jugadores.get(turno).anhadirPropiedad(tablero.encontrar_casilla(nombre));
         tablero.encontrar_casilla(nombre).setDuenho(jugadores.get(turno));
+        System.out.println("Casilla comprada con éxito.\n");
     }
 
     //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. 
@@ -346,6 +352,7 @@
 
     // Método que realiza las acciones asociadas al comando 'listar enventa'.
     private void listarVenta() {
+        
     }
 
     // Método que realiza las acciones asociadas al comando 'listar jugadores'.
