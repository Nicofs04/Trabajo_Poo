Index: partida/Jugador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package partida;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport monopoly.*;\r\n\r\n\r\npublic class Jugador {\r\n\r\n    //Atributos:\r\n    private String nombre; //Nombre del jugador\r\n    private Avatar avatar; //Avatar que tiene en la partida.\r\n    private float fortuna; //Dinero que posee.\r\n    private float gastos; //Gastos realizados a lo largo del juego.\r\n    private boolean enCarcel; //Será true si el jugador está en la carcel\r\n    private int tiradasCarcel; //Cuando está en la carcel, contará las tiradas sin éxito que ha hecho allí para intentar salir (se usa para limitar el numero de intentos).\r\n    private int vueltas; //Cuenta las vueltas dadas al tablero.\r\n    private ArrayList<Casilla> propiedades; //Propiedades que posee el jugador.\r\n\r\n    //Constructor vacío. Se usará para crear la banca.\r\n    public Jugador() {\r\n    }\r\n\r\n    /*Constructor principal. Requiere parámetros:\r\n    * Nombre del jugador, tipo del avatar que tendrá, casilla en la que empezará y ArrayList de\r\n    * avatares creados (usado para dos propósitos: evitar que dos jugadores tengan el mismo nombre y\r\n    * que dos avatares tengan mismo ID). Desde este constructor también se crea el avatar.\r\n     */\r\n    public Jugador(String nombre, String tipoAvatar, Casilla inicio, ArrayList<Avatar> avCreados) {\r\n    }\r\n\r\n    public String getNombre(){\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre){\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public Avatar getAvatar(){\r\n        return avatar;\r\n    }\r\n\r\n    public void setAvatar(Avatar avatar){\r\n        this.avatar = avatar;\r\n    }\r\n\r\n    public float getFortuna(){\r\n        return fortuna;\r\n    }\r\n\r\n    public void setFortuna(float fortuna){\r\n        this.fortuna = fortuna;\r\n    }\r\n\r\n    public float getGastos(){\r\n        return gastos;\r\n    }\r\n\r\n    public void setGastos(float gastos){\r\n        this.gastos = gastos;\r\n    }\r\n\r\n    public boolean getEnCarcel(){\r\n        return enCarcel;\r\n    }\r\n\r\n    public void setEnCarcel(boolean enCarcel){\r\n        this.enCarcel = enCarcel;\r\n    }\r\n\r\n    public int getTiradasCarcel(){\r\n        return tiradasCarcel;\r\n    }\r\n\r\n    public void setTiradasCarcel(int tiradasCarcel){\r\n        this.tiradasCarcel = tiradasCarcel;\r\n    }\r\n\r\n    public int getVueltas(){\r\n        return vueltas;\r\n    }\r\n\r\n    public void setVueltas(int vueltas){\r\n        this.vueltas = vueltas;\r\n    }\r\n\r\n    public ArrayList<Casilla> getPropiedades(){\r\n        return propiedades;\r\n    }\r\n\r\n    public void setPropiedades(ArrayList<Casilla> propiedades){\r\n        this.propiedades = propiedades;\r\n    }\r\n\r\n    //Otros métodos:\r\n    //Método para añadir una propiedad al jugador. Como parámetro, la casilla a añadir.\r\n    public void anhadirPropiedad(Casilla casilla) {\r\n    }\r\n\r\n    //Método para eliminar una propiedad del arraylist de propiedades de jugador.\r\n    public void eliminarPropiedad(Casilla casilla) {\r\n    }\r\n\r\n    //Método para añadir fortuna a un jugador\r\n    //Como parámetro se pide el valor a añadir. Si hay que restar fortuna, se pasaría un valor negativo.\r\n    public void sumarFortuna(float valor) {\r\n    }\r\n\r\n    //Método para sumar gastos a un jugador.\r\n    //Parámetro: valor a añadir a los gastos del jugador (será el precio de un solar, impuestos pagados...).\r\n    public void sumarGastos(float valor) {\r\n    }\r\n\r\n    /*Método para establecer al jugador en la cárcel. \r\n    * Se requiere disponer de las casillas del tablero para ello (por eso se pasan como parámetro).*/\r\n    public void encarcelar(ArrayList<ArrayList<Casilla>> pos) {\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/partida/Jugador.java b/partida/Jugador.java
--- a/partida/Jugador.java	(revision 83e989966604b040d298c67c0d515b84354884c1)
+++ b/partida/Jugador.java	(date 1727871257267)
@@ -96,6 +96,7 @@
     //Otros métodos:
     //Método para añadir una propiedad al jugador. Como parámetro, la casilla a añadir.
     public void anhadirPropiedad(Casilla casilla) {
+        propiedades.add(casilla);
     }
 
     //Método para eliminar una propiedad del arraylist de propiedades de jugador.
Index: monopoly/Tablero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class Tablero {\r\n    //Atributos.\r\n    private ArrayList<ArrayList<Casilla>> posiciones; //Posiciones del tablero: se define como un arraylist de arraylists de casillas (uno por cada lado del tablero).\r\n    private HashMap<String, Grupo> grupos; //Grupos del tablero, almacenados como un HashMap con clave String (será el color del grupo).\r\n    private Jugador banca; //Un jugador que será la banca.\r\n\r\n    //Constructor: únicamente le pasamos el jugador banca (que se creará desde el menú).\r\n    public Tablero(Jugador banca) {\r\n        this.posiciones = new ArrayList<ArrayList<Casilla>>();\r\n        this.grupos = new HashMap<String, Grupo>();\r\n        this.banca = banca;\r\n    }\r\n\r\n    public ArrayList<ArrayList<Casilla>> getPosiciones(){\r\n        return posiciones;\r\n    }\r\n\r\n    public void setPosiciones(ArrayList<ArrayList<Casilla>> posiciones){\r\n        this.posiciones = posiciones;\r\n    }\r\n\r\n    public HashMap<String, Grupo> getGrupos(){\r\n        return grupos;\r\n    }\r\n\r\n    public void setGrupos(ArrayList<ArrayList<Casilla>>){\r\n        this.grupos = grupos;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n    \r\n    //Método para crear todas las casillas del tablero. Formado a su vez por cuatro métodos (1/lado).\r\n    private void generarCasillas() {\r\n        this.insertarLadoSur();\r\n        this.insertarLadoOeste();\r\n        this.insertarLadoNorte();\r\n        this.insertarLadoEste();\r\n    }\r\n\r\n\r\n    //Método para insertar las casillas del lado norte.\r\n    private void insertarLadoNorte() {\r\n        ArrayList<Casilla> arrayCasillasNorte = new ArrayList<Casilla>();\r\n        arrayCasillasNorte.add(new Casilla(\"Parking\", \"especial\", 20, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar12\",\"solar\", 21, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"suerte\", \"suerte\",22, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar13\", \"solar\",23, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar14\", \"solar\",24, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"trans3\", \"transporte\",25, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar15\", \"solar\",26, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar16\", \"solar\",27, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"serv2\", \"servicio\",28, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar17\", \"solar\",29, 0, banca));\r\n        posiciones.add(arrayCasillasNorte);\r\n        Grupo rojo = new Grupo(arrayCasillasNorte.get(1),arrayCasillasNorte.get(3), arrayCasillasNorte.get(4), \"RED\");\r\n        grupos.put(\"ROJO\", rojo);\r\n        Grupo amarillo = new Grupo(arrayCasillasNorte.get(6),arrayCasillasNorte.get(7), arrayCasillasNorte.get(9), \"BROWN\");\r\n        grupos.put(\"AMARILLO\", amarillo);\r\n    }\r\n\r\n    //Método para insertar las casillas del lado sur.\r\n    private void insertarLadoSur() {\r\n        ArrayList<Casilla> arrayCasillasSur = new ArrayList<Casilla>();\r\n        arrayCasillasSur.add(new Casilla(\"salida\",\"especial\",0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar1\",\"solar\",1,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"caja\",\"caja\",2, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar2\",\"solar\",3,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"imp1\",4,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"trans1\",\"transporte\",5,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar3\",\"solar\",6,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"suerte\",\"suerte\",7, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar4\",\"solar\",8,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar5\",\"solar\",9,0, banca));\r\n        posiciones.add(arrayCasillasSur);\r\n        Grupo negro = new Grupo(arrayCasillasSur.get(1),arrayCasillasSur.get(3),\"BLACK\");\r\n        grupos.put(\"NEGRO\", negro);\r\n        Grupo cyan = new Grupo(arrayCasillasSur.get(6),arrayCasillasSur.get(7), arrayCasillasSur.get(9), \"CYAN\");\r\n        grupos.put(\"CYAN\", cyan);\r\n    }\r\n\r\n    //Método que inserta casillas del lado oeste.\r\n    private void insertarLadoOeste() {\r\n        ArrayList<Casilla> arrayCasillasOeste = new ArrayList<Casilla>();\r\n        arrayCasillasOeste.add(new Casilla(\"carcel\", \"especial\", 10, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar6\", \"solar\", 11, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"serv1\", \"servicio\", 12, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar7\", \"solar\", 13, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar8\", \"solar\", 14, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"trans2\", \"transporte\", 15, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar9\", \"solar\", 16, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"caja\", \"caja\", 17, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar10\", \"solar\", 18, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar11\", \"solar\", 19, 0, banca));\r\n        posiciones.add(arrayCasillasOeste);\r\n        Grupo violeta = new Grupo(arrayCasillasOeste.get(1),arrayCasillasOeste.get(3), arrayCasillasOeste.get(4), \"PURPLE\");\r\n        grupos.put(\"VIOLETA\", violeta);\r\n        Grupo blanco = new Grupo(arrayCasillasOeste.get(6),arrayCasillasOeste.get(7), arrayCasillasOeste.get(9), \"WHITE\");\r\n        grupos.put(\"BLANCO\", blanco);\r\n    }\r\n\r\n    //Método que inserta las casillas del lado este.\r\n    private void insertarLadoEste() {\r\n        ArrayList<Casilla> arrayCasillasEste = new ArrayList<Casilla>();\r\n        arrayCasillasEste.add(new Casilla(\"ircarcel\",\"especial\",30,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar18\",\"solar\",31,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar19\",\"solar\",32,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"caja\",\"caja\",33,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar20\",\"solar\",34,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"trans4\",\"transporte\",35,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"suerte\",\"suerte\",36,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",37,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"imp1\",38,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",39,0,banca));\r\n        posiciones.add(arrayCasillasEste);\r\n        Grupo verde = new Grupo(arrayCasillasEste.get(1),arrayCasillasEste.get(3), arrayCasillasEste.get(4), \"GREEN\");\r\n        grupos.put(\"VERDE\", verde);\r\n        Grupo azul = new Grupo(arrayCasillasEste.get(6),arrayCasillasEste.get(7),\"BLUE\");\r\n        grupos.put(\"AZUL\", azul);\r\n    }\r\n\r\n    //Para imprimir el tablero, modificamos el método toString().\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder tablero= new StringBuilder();\r\n        tablero.append(\"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\");\r\n        for(Casilla casillasnorte: posiciones.get(2)){\r\n            tablero.append(\"|\");\r\n            tablero.append(casillasnorte.getNombre());\r\n            tablero.append(\"|\");\r\n        }\r\n        tablero.append(\"\\n------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\")\r\n        return \"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\"\r\n                + \"|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\\n\"\r\n                + \"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\"+\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" + \"------\\t\\t\\t\\t\\t\\t\\t------\\n\" +\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" + \"------\\t\\t\\t\\t\\t\\t\\t------\\n\" +\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" + \"------\\t\\t\\t\\t\\t\\t\\t------\\n\" +\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" + \"------\\t\\t\\t\\t\\t\\t\\t------\\n\" +\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" + \"------\\t\\t\\t\\t\\t\\t\\t------\\n\" +\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" + \"------\\t\\t\\t\\t\\t\\t\\t------\\n\" +\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" + \"------\\t\\t\\t\\t\\t\\t\\t------\\n\" +\r\n                \"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\" +\r\n                \"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\" +\r\n                \"|%s||%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\\n\"\r\n                + \"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\" , for(Casilla ladonorte :posiciones.get(2)){\r\n\r\n        }\r\n    }\r\n    \r\n    //Método usado para buscar la casilla con el nombre pasado como argumento:\r\n    public Casilla encontrar_casilla(String nombre){\r\n        for(ArrayList<Casilla> lados:posiciones){\r\n            for (Casilla casilla:lados){\r\n                if (nombre.equals(casilla.getNombre())){\r\n                    return casilla;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"No se ha encontrado la casilla\\n\");\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Tablero.java b/monopoly/Tablero.java
--- a/monopoly/Tablero.java	(revision 83e989966604b040d298c67c0d515b84354884c1)
+++ b/monopoly/Tablero.java	(date 1727871989224)
@@ -145,7 +145,7 @@
         }
         tablero.append("\n------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n")
         return "------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n"
-                + "|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\n"
+                + "|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\n"
                 + "------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n"+
                 "|%s|\t\t\t\t\t\t\t|%s|\n" + "------\t\t\t\t\t\t\t------\n" +
                 "|%s|\t\t\t\t\t\t\t|%s|\n" + "------\t\t\t\t\t\t\t------\n" +
@@ -157,9 +157,9 @@
                 "|%s|\t\t\t\t\t\t\t|%s|\n" +
                 "------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n" +
                 "|%s||%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\n"
-                + "------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n" , for(Casilla ladonorte :posiciones.get(2)){
-
-        }
+                + "------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\n" + for(Casilla ladonorte:posiciones.get(2)){
+            System.out.println(ladonorte.getNombre());
+        } + posiciones.get(1).get(0)
     }
     
     //Método usado para buscar la casilla con el nombre pasado como argumento:
Index: monopoly/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\nimport partida.*;\r\n\r\npublic class Menu {\r\n\r\n    //Atributos\r\n    private ArrayList<Jugador> jugadores; //Jugadores de la partida.\r\n    private ArrayList<Avatar> avatares; //Avatares en la partida.\r\n    private int turno = 0; //Índice correspondiente a la posición en el arrayList del jugador (y el avatar) que tienen el turno\r\n    private int lanzamientos; //Variable para contar el número de lanzamientos de un jugador en un turno.\r\n    private Tablero tablero; //Tablero en el que se juega.\r\n    private Dado dado1; //Dos dados para lanzar y avanzar casillas.\r\n    private Dado dado2;\r\n    private Jugador banca; //El jugador banca.\r\n    private boolean tirado; //Booleano para comprobar si el jugador que tiene el turno ha tirado o no.\r\n    private boolean solvente; //Booleano para comprobar si el jugador que tiene el turno es solvente, es decir, si ha pagado sus deudas.\r\n    private boolean dadosdobles;\r\n\r\n    public Menu(){\r\n        this.jugadores = new ArrayList<Jugador>();\r\n        this.avatares = new ArrayList<Avatar>();\r\n        this.banca = new Jugador();\r\n        this.tablero = new Tablero(banca);\r\n        this.dado1 = new Dado();\r\n        this.dado2 = new Dado();\r\n    }\r\n\r\n    public ArrayList<Jugador> getJugadores(){\r\n        return jugadores;\r\n    }\r\n\r\n    public void setJugadores(ArrayList<Jugador> jugadores){\r\n        this.jugadores = jugadores;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares(){\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares){\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    public int getTurno(){\r\n        return turno;\r\n    }\r\n\r\n    public void setTurno(int turno){\r\n        this.turno = turno;\r\n    }\r\n\r\n    public int getLanzamientos(){\r\n        return lanzamientos;\r\n    }\r\n\r\n    public void setLanzamientos(int lanzamientos){\r\n        this.lanzamientos = lanzamientos;\r\n    }\r\n\r\n    public Tablero getTablero(){\r\n        return tablero;\r\n    }\r\n\r\n    public void setTablero(Tablero tablero){\r\n        this.tablero = tablero;\r\n    }\r\n\r\n    public Dado getDado1(){\r\n        return dado1;\r\n    }\r\n\r\n    public void setDado1(Dado dado1){\r\n        this.dado1 = dado1;\r\n    }\r\n\r\n    public Dado getDado2(){\r\n        return dado2;\r\n    }\r\n\r\n    public void setDado2(Dado dado2){\r\n        this.dado2 = dado2;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n\r\n    public boolean getTirado(){\r\n        return tirado;\r\n    }\r\n\r\n    public void setTirado(boolean tirado){\r\n        this.tirado = tirado;\r\n    }\r\n\r\n    public boolean getSolvente(){\r\n        return solvente;\r\n    }\r\n\r\n    public void setSolvente(boolean solvente){\r\n        this.solvente = solvente;\r\n    }\r\n\r\n    // Método para inciar una partida: crea los jugadores y avatares.\r\n    private void iniciarPartida() {\r\n        new Menu();\r\n        jugadores.add(banca);\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        String comando = scanner.nextLine();\r\n        analizarComando(comando);\r\n    }\r\n    \r\n    /*Método que interpreta el comando introducido y toma la accion correspondiente.\r\n    * Parámetro: cadena de caracteres (el comando).\r\n    */\r\n    private void analizarComando(String comando) {\r\n        String[] palabras = comando.split(\" \");\r\n        String metodo = palabras[0] + \" \" + palabras[1];\r\n        String nombre = palabras[2];\r\n        String avatar = palabras[3];\r\n\r\n        if(metodo.equals(\"crear jugador\")){\r\n\r\n        }else if(metodo.equals(\"\"))\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir jugador'.\r\n    * Parámetro: comando introducido\r\n     */\r\n    private void descJugador(String[] palabras) {\r\n        for(Jugador jugador:jugadores){\r\n            if((jugador.getNombre()).equals(partes[2])){\r\n                System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + listarPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir avatar'.\r\n    * Parámetro: id del avatar a describir.\r\n    */\r\n    private void descAvatar(String ID) {\r\n        for(Avatar avatar:avatares){\r\n            if((avatar.getId()).equals(ID)){\r\n                System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + avatar.getCasilla() + \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Método que realiza las acciones asociadas al comando 'describir nombre_casilla'.\r\n    * Parámetros: nombre de la casilla a describir.\r\n    */\r\n    private void descCasilla(String nombre) {\r\n        Casilla casilla = tablero.encontrar_casilla(nombre);\r\n        System.out.println(casilla); //tengo la funcion hecha en casilla.java\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'lanzar dados'.\r\n    private void lanzarDados() {\r\n\r\n        dado1.hacerTirada();\r\n        dado2.hacerTirada();\r\n\r\n        dadosdobles=dado1.equals(dado2);\r\n        if (dadosdobles) {\r\n            System.out.println(\"Sacaste dobles\");\r\n        }\r\n\r\n   }\r\n\r\n    /*Método que ejecuta todas las acciones realizadas con el comando 'comprar nombre_casilla'.\r\n    * Parámetro: cadena de caracteres con el nombre de la casilla.\r\n     */\r\n    private void comprar(String nombre) {\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. \r\n    private void salirCarcel() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar enventa'.\r\n    private void listarVenta() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar jugadores'.\r\n    private void listarJugadores() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar avatares'.\r\n    private void listarAvatares() {\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'acabar turno'.\r\n    private void acabarTurno() {\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Menu.java b/monopoly/Menu.java
--- a/monopoly/Menu.java	(revision 83e989966604b040d298c67c0d515b84354884c1)
+++ b/monopoly/Menu.java	(date 1727871257395)
@@ -180,6 +180,7 @@
     * Parámetro: cadena de caracteres con el nombre de la casilla.
      */
     private void comprar(String nombre) {
+
     }
 
     //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. 
