Index: monopoly/Casilla.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Casilla {\r\n    // Atributos:\r\n    private String nombre; // Nombre de la casilla\r\n    private String tipo; // Tipo de casilla (Solar, Especial, Transporte, Servicios, Comunidad).\r\n    private float valor; // Valor de esa casilla (en la mayoría será valor de compra, en la casilla\r\n                         // parking se usará como el bote).\r\n    private int posicion; // Posición que ocupa la casilla en el tablero (entero entre 1 y 40).\r\n    private Jugador duenho; // Dueño de la casilla (por defecto sería la banca).\r\n    private Grupo grupo; // Grupo al que pertenece la casilla (si es solar).\r\n    private float impuesto; // Cantidad a pagar por caer en la casilla: el alquiler en\r\n                            // solares/servicios/transportes o impuestos.\r\n    private float hipoteca; // Valor otorgado por hipotecar una casilla\r\n    private ArrayList<Avatar> avatares; // Avatares que están situados en la casilla.\r\n    private Scanner scanner = new Scanner(System.in);\r\n\r\n    // Constructores:\r\n    public Casilla() {\r\n    }// Parámetros vacíos\r\n\r\n    /*\r\n     * Constructor para casillas tipo Solar, Servicios o Transporte:\r\n     * Parámetros: nombre casilla, tipo (debe ser solar, serv. o transporte),\r\n     * posición en el tablero, valor y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, float valor, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.valor = valor;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para inicializar las casillas de tipo IMPUESTOS.\r\n     * Parámetros: nombre, posición en el tablero, impuesto establecido y dueño.\r\n     */\r\n    public Casilla(String nombre, int posicion, float impuesto, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.posicion = posicion;\r\n        this.impuesto = impuesto;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para crear las otras casillas (Suerte, Caja de\r\n     * comunidad y Especiales):\r\n     * Parámetros: nombre, tipo de la casilla (será uno de los que queda), posición\r\n     * en el tablero y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public String getTipo() {\r\n        return tipo;\r\n    }\r\n\r\n    public void setTipo(String tipo) {\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    public float getValor() {\r\n        return valor;\r\n    }\r\n\r\n    public void setValor(float valor) {\r\n        this.valor = valor;\r\n    }\r\n\r\n    public int getPosicion() {\r\n        return posicion;\r\n    }\r\n\r\n    public void setPosicion(int posicion) {\r\n        this.posicion = posicion;\r\n    }\r\n\r\n    public Jugador getDuenho() {\r\n        return duenho;\r\n    }\r\n\r\n    public void setDuenho(Jugador duenho) {\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public Grupo getGrupo() { // mirar la clase grupo(puse public class en lugar de class a secas)\r\n        return grupo;\r\n    }\r\n\r\n    public void setGrupo(Grupo grupo) {\r\n        this.grupo = grupo;\r\n    }\r\n\r\n    public float getImpuesto() {\r\n        return impuesto;\r\n    }\r\n\r\n    public void setImpuesto(float impuesto) {\r\n        this.impuesto = impuesto;\r\n    }\r\n\r\n    public float getHipoteca() {\r\n        return hipoteca;\r\n    }\r\n\r\n    public void setHipoteca(float hipoteca) {\r\n        this.hipoteca = hipoteca;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares() {\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares) { // AL SER UN ARRAY TENGO QUE ITERAR CADA UNA DE SUS POSICIONES\r\n                                                          // O ASÍ ESTÁ BIEN?\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    @Override\r\n    public String toString() { falta poner si es delujo o parking...\r\n        return \"tipo: \" + getTipo() + \",\\n grupo: \" + getGrupo() + \",\\n propietario: \" + getDuenho() + \",\\n valor: \"\r\n                + getValor() + \",\\n alquiler: \" + \"220000\" +\r\n                \",\\n valor hotel: \" + \"1560000\" + \",\\n valor casa: \" + \"1560000\" + \",\\n valor piscina: \" + \"1040000\"\r\n                + \",\\n valor pista de deportes: \"\r\n                + \"3250000\" + \",\\n alquiler de una casa: \" + \"1100000\" + \",\\n alquiler dos casas: \" + \"3300000\" +\r\n                \",\\n alquiler tres casas: \" + \"7700000\" + \",\\n alquiler cuatro casas: \" + \"11000000\"\r\n                + \",\\n alquiler hotel: \" +\r\n                \"15400000\" + \",\\n alquiler piscina: \" + \"5500000\" + \",\\n alquiler pista de deporte: \" + \"5500000\";\r\n    }\r\n\r\n    // Método utilizado para añadir un avatar al array de avatares en casilla.\r\n    public void anhadirAvatar(Avatar av) {\r\n        this.avatares.add(av);\r\n    }\r\n\r\n    // Método utilizado para eliminar un avatar del array de avatares en casilla.\r\n    public void eliminarAvatar(Avatar av) {\r\n        this.avatares.remove(av);\r\n    }\r\n\r\n    /*\r\n     * Método para evaluar qué hacer en una casilla concreta. Parámetros:\r\n     * - Jugador cuyo avatar está en esa casilla.\r\n     * - La banca (para ciertas comprobaciones).\r\n     * - El valor de la tirada: para determinar impuesto a pagar en casillas de\r\n     * servicios.\r\n     * Valor devuelto: true en caso de ser solvente (es decir, de cumplir las\r\n     * deudas), y false\r\n     * en caso de no cumplirlas.\r\n     */\r\n    public boolean evaluarCasilla(Jugador actual, Jugador banca, int tirada) {\r\n        \r\n\r\n    }\r\n\r\n    /*\r\n     * Método usado para comprar una casilla determinada. Parámetros:\r\n     * - Jugador que solicita la compra de la casilla.\r\n     * - Banca del monopoly (es el dueño de las casillas no compradas aún).\r\n     */\r\n\r\n    /*\r\n     * SOLO SE PUEDEN COMPRAR LAS CASILLAS DE TIPO SOLAR,SERVICIOS Y TRANSPORTE,\r\n     * TIENE QUE TENER DINERO SUFICIENTE EL SOLICITANTE, y el dueño tiene que ser la\r\n     * banca\r\n     * ,\r\n     * Al solicitante hay que asignarle la propiedad, quitarle la pasta y sumarle\r\n     * los gastos, a la banca quitarle\r\n     * la propiedad y darle la pasta y hay que asignar el nuevo dueño a la casilla,\r\n     * que será el solicitante\r\n     */\r\n    public void comprarCasilla(Jugador solicitante, Jugador banca) {\r\n        // Comprobamos que sea una casilla \"comprable\"\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))\r\n                && (solicitante.getFortuna() >= this.valor) && (this.duenho == banca)) {\r\n\r\n            // JUGADOR SOLICITANTE\r\n\r\n            // \"quitar pasta\"\r\n            solicitante.setFortuna(solicitante.getFortuna() - this.valor);\r\n\r\n            // \"sumar gastos\"\r\n            solicitante.setGastos(solicitante.getGastos() + this.valor);\r\n\r\n            // \"asignarle la propiedad\"\r\n            // Primero tenemos que cambiarle el dueño a la casilla\r\n            this.duenho = solicitante;\r\n            solicitante.getPropiedades().add(this);\r\n\r\n            // BANCA, aunque realmente es innecesario\r\n            banca.setFortuna(banca.getFortuna() + this.valor);\r\n\r\n            System.out.println(\"El jugador \" + solicitante.getNombre() + \"compra la casilla \"\r\n                    + solicitante.getAvatar().getLugar().getNombre() + \"por \" + this.valor);\r\n            System.out.println(\"Su fortuna actual es:\" + solicitante.getFortuna());\r\n\r\n        } else if ((this.tipo != \"Solar\") && (this.tipo != \"Servicios\") && (this.tipo != \"Transporte\")) {\r\n            // En caso de que no sea de ninguno de estos tipos, la propiedad no se podrá\r\n            // comprar\r\n            System.out.println(\r\n                    \"Esta propiedad no se puede comprar, para poder comprar una propiedad debe de ser de uno de los siguientes tipos: SOLAR, TRANSPORTE, SERVICIOS\\n\");\r\n        } else {\r\n            System.out.println(\"No tienes dinero suficiente como para comprar esta propiedad\\n\");\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * Método para añadir valor a una casilla. Utilidad:\r\n     * - Sumar valor a la casilla de parking.\r\n     * - Sumar valor a las casillas de solar al no comprarlas tras cuatro vueltas de\r\n     * todos los jugadores.\r\n     * Este método toma como argumento la cantidad a añadir del valor de la casilla.\r\n     */\r\n\r\n    // Si la casilla en la que cae el avatar es Parking, entonces deberá de recibir\r\n    // el bote almacenado por el pago de impuestos o tasas.\r\n    public void sumarValor(float suma) {\r\n        this.valor+=suma;\r\n    }\r\n\r\n    /*\r\n     * Método para mostrar información sobre una casilla.\r\n     * Devuelve una cadena con información específica de cada tipo de casilla.\r\n     */\r\n    public String infoCasilla() {\r\n        StringBuilder info = new StringBuilder();\r\n    \r\n        if (this.tipo.equals(\"solar\")) {\r\n            info.append(\"Nombre de la casilla: \").append(this.nombre).append(\"\\n\");\r\n            info.append(\"Tipo de la casilla: \").append(this.tipo).append(\"\\n\");\r\n            info.append(\"Valor de la casilla: \").append(this.valor).append(\"\\n\");\r\n            info.append(\"Posición de la casilla: \").append(this.posicion).append(\"\\n\");\r\n            info.append(\"Nombre del dueño de la casilla: \").append(this.duenho.getNombre()).append(\"\\n\");\r\n            info.append(\"Grupo de la casilla: \").append(this.grupo.getColorGrupo()).append(\"\\n\");\r\n            info.append(\"Impuesto por caer en la casilla: \").append(this.impuesto).append(\"\\n\");\r\n            info.append(\"Valor de hipoteca: \").append(this.hipoteca).append(\"\\n\");\r\n    \r\n            info.append(\"Avatares en la casilla:\\n\");\r\n            for (int i = 0; i < this.avatares.size(); i++) {\r\n                info.append(\"Avatar \").append(i).append(\": \").append(this.avatares.get(i).getId()).append(\"\\n\");\r\n            }\r\n    \r\n        } else {\r\n            info.append(\"Nombre de la casilla: \").append(this.nombre).append(\"\\n\");\r\n            info.append(\"Tipo de la casilla: \").append(this.tipo).append(\"\\n\");\r\n            info.append(\"Valor de la casilla: \").append(this.valor).append(\"\\n\");\r\n            info.append(\"Posición de la casilla: \").append(this.posicion).append(\"\\n\");\r\n            info.append(\"Nombre del dueño de la casilla: \").append(this.duenho.getNombre()).append(\"\\n\");\r\n            info.append(\"Impuesto por caer en la casilla: \").append(this.impuesto).append(\"\\n\");\r\n            info.append(\"Valor de hipoteca: \").append(this.hipoteca).append(\"\\n\");\r\n    \r\n            info.append(\"Avatares en la casilla:\\n\");\r\n            for (int i = 0; i < this.avatares.size(); i++) {\r\n                info.append(\"Avatar \").append(i).append(\": \").append(this.avatares.get(i).getId()).append(\"\\n\");\r\n            }\r\n        }\r\n        //CREO QUE ESTA MAL\r\n        return info.toString();\r\n    }\r\n    \r\n\r\n    /*\r\n     * Método para mostrar información de una casilla en venta.\r\n     * Valor devuelto: texto con esa información.\r\n     */\r\n    public String casEnVenta() {\r\n        // Para mostrar la informacion tiene que estar en venta, y para estar en venta,\r\n        // el dueño tiene que ser la banca y cumplir los requisitos del primer if de\r\n        // \"comprarCasilla\"\r\n        // DOY POR HECHO QUE EL JUGADOR BANCA DE LLAMA \"banca\", si no habría que pasarle\r\n        // la banca como parámetro a la función\r\n        StringBuilder sb = new StringBuilder();\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))&& (this.duenho.getNombre() == \"Banca\")) {\r\n            if(this.tipo==\"Solar\"){\r\n\r\n                sb.append(String.format(\"Nombre de la casilla a la venta: %s\", this.getNombre()));\r\n                sb.append(String.format(\"Tipo de la casilla a la venta: %s\", this.getTipo()));\r\n                sb.append(String.format(\"Valor de la casilla a la venta: %s\", this.getValor()));\r\n                sb.append(String.format(\"Posición de la casilla a la venta: %s\", this.getPosicion()));\r\n                sb.append(String.format(\"Nombre del dueño de la casilla: %s\", this.getDuenho().getNombre()));\r\n                sb.append(String.format(\"Grupo de la casilla a la venta: %s\", this.getColorGrupo()));\r\n                sb.append(String.format(\"Impuesto por caer en la casilla: %s\", this.getImpuesto()));\r\n                sb.append(String.format(\"Valor de hipoteca: %s\", this.getHipoteca()));\r\n                sb.append(\"Avatares: \");\r\n                for(Avatar avatar:avatares){\r\n                    sb.append(String.format(\"%s\\t\", avatar.getId()));\r\n                }\r\n            }else{\r\n                sb.append(String.format(\"Nombre de la casilla a la venta: %s\", this.getNombre()));\r\n                sb.append(String.format(\"Tipo de la casilla a la venta: %s\", this.getTipo()));\r\n                sb.append(String.format(\"Valor de la casilla a la venta: %s\", this.getValor()));\r\n                sb.append(String.format(\"Posición de la casilla a la venta: %s\", this.getPosicion()));\r\n                sb.append(String.format(\"Nombre del dueño de la casilla: %s\", this.getDuenho().getNombre()));\r\n                sb.append(String.format(\"Impuesto por caer en la casilla: %s\", this.getImpuesto()));\r\n                sb.append(String.format(\"Valor de hipoteca: %s\", this.getHipoteca()));\r\n                sb.append(String.format(\"Avatares: \"));\r\n                for(Avatar avatar:avatares){\r\n                    sb.append(String.format(\"%s\\t\"));\r\n                }\r\n            }\r\n            //CREO QUE ESTA MAL\r\n            return sb.toString();\r\n\r\n        }else{\r\n            String.format(\"Esta casilla no está a la venta\\n\");\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n\r\n    public String generarCasilla(int posicion) {\r\n        return this.nombre;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Casilla.java b/monopoly/Casilla.java
--- a/monopoly/Casilla.java	(revision 723b91b836385eabbd31583319358f0d15d8c997)
+++ b/monopoly/Casilla.java	(date 1728308872015)
@@ -134,7 +134,7 @@
     }
 
     @Override
-    public String toString() { falta poner si es delujo o parking...
+    public String toString() { //falta poner si es delujo o parking...
         return "tipo: " + getTipo() + ",\n grupo: " + getGrupo() + ",\n propietario: " + getDuenho() + ",\n valor: "
                 + getValor() + ",\n alquiler: " + "220000" +
                 ",\n valor hotel: " + "1560000" + ",\n valor casa: " + "1560000" + ",\n valor piscina: " + "1040000"
@@ -296,7 +296,7 @@
                 sb.append(String.format("Valor de la casilla a la venta: %s", this.getValor()));
                 sb.append(String.format("Posición de la casilla a la venta: %s", this.getPosicion()));
                 sb.append(String.format("Nombre del dueño de la casilla: %s", this.getDuenho().getNombre()));
-                sb.append(String.format("Grupo de la casilla a la venta: %s", this.getColorGrupo()));
+                sb.append(String.format("Grupo de la casilla a la venta: %s", this.getGrupo().getColorGrupo()));
                 sb.append(String.format("Impuesto por caer en la casilla: %s", this.getImpuesto()));
                 sb.append(String.format("Valor de hipoteca: %s", this.getHipoteca()));
                 sb.append("Avatares: ");
Index: monopoly/Tablero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class Tablero {\r\n    //Atributos.\r\n    private ArrayList<ArrayList<Casilla>> posiciones; //Posiciones del tablero: se define como un arraylist de arraylists de casillas (uno por cada lado del tablero).\r\n    private HashMap<String, Grupo> grupos; //Grupos del tablero, almacenados como un HashMap con clave String (será el color del grupo).\r\n    private Jugador banca; //Un jugador que será la banca.\r\n\r\n    //Constructor: únicamente le pasamos el jugador banca (que se creará desde el menú).\r\n    public Tablero(Jugador banca) {\r\n        this.posiciones = new ArrayList<ArrayList<Casilla>>();\r\n        this.grupos = new HashMap<String, Grupo>();\r\n        this.banca = banca;\r\n        generarCasillas();\r\n    }\r\n\r\n    public ArrayList<ArrayList<Casilla>> getPosiciones(){\r\n        return posiciones;\r\n    }\r\n\r\n    public void setPosiciones(ArrayList<ArrayList<Casilla>> posiciones){\r\n        this.posiciones = posiciones;\r\n    }\r\n\r\n    public HashMap<String, Grupo> getGrupos(){\r\n        return grupos;\r\n    }\r\n\r\n    public void setGrupos(HashMap<String,Grupo> grupos){\r\n        this.grupos = grupos;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n    \r\n    //Método para crear todas las casillas del tablero. Formado a su vez por cuatro métodos (1/lado).\r\n    private void generarCasillas() {\r\n        this.insertarLadoSur();\r\n        this.insertarLadoOeste();\r\n        this.insertarLadoNorte();\r\n        this.insertarLadoEste();\r\n    }\r\n\r\n\r\n    //Método para insertar las casillas del lado norte.\r\n    private void insertarLadoNorte() {\r\n        ArrayList<Casilla> arrayCasillasNorte = new ArrayList<Casilla>();\r\n        arrayCasillasNorte.add(new Casilla(\"Parking\", \"especial\", 20, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar12\",\"solar\", 21, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"suerte\", \"suerte\",22, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar13\", \"solar\",23, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar14\", \"solar\",24, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"trans3\", \"transporte\",25, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar15\", \"solar\",26, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar16\", \"solar\",27, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"serv2\", \"servicio\",28, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar17\", \"solar\",29, 0, banca));\r\n        posiciones.add(arrayCasillasNorte);\r\n        Grupo rojo = new Grupo(arrayCasillasNorte.get(1),arrayCasillasNorte.get(3), arrayCasillasNorte.get(4), \"RED\");\r\n        grupos.put(\"ROJO\", rojo);\r\n        Grupo amarillo = new Grupo(arrayCasillasNorte.get(6),arrayCasillasNorte.get(7), arrayCasillasNorte.get(9), \"BROWN\");\r\n        grupos.put(\"AMARILLO\", amarillo);\r\n    }\r\n\r\n    //Método para insertar las casillas del lado sur.\r\n    private void insertarLadoSur() {\r\n        ArrayList<Casilla> arrayCasillasSur = new ArrayList<Casilla>();\r\n        arrayCasillasSur.add(new Casilla(\"salida\",\"especial\",0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar1\",\"solar\",1,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"caja\",\"caja\",2, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar2\",\"solar\",3,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"imp1\",4,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"trans1\",\"transporte\",5,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar3\",\"solar\",6,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"suerte\",\"suerte\",7, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar4\",\"solar\",8,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar5\",\"solar\",9,0, banca));\r\n        posiciones.add(arrayCasillasSur);\r\n        Grupo negro = new Grupo(arrayCasillasSur.get(1),arrayCasillasSur.get(3),\"BLACK\");\r\n        grupos.put(\"NEGRO\", negro);\r\n        Grupo cyan = new Grupo(arrayCasillasSur.get(6),arrayCasillasSur.get(7), arrayCasillasSur.get(9), \"CYAN\");\r\n        grupos.put(\"CYAN\", cyan);\r\n    }\r\n\r\n    //Método que inserta casillas del lado oeste.\r\n    private void insertarLadoOeste() {\r\n        ArrayList<Casilla> arrayCasillasOeste = new ArrayList<Casilla>();\r\n        arrayCasillasOeste.add(new Casilla(\"carcel\", \"especial\", 10, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar6\", \"solar\", 11, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"serv1\", \"servicio\", 12, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar7\", \"solar\", 13, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar8\", \"solar\", 14, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"trans2\", \"transporte\", 15, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar9\", \"solar\", 16, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"caja\", \"caja\", 17, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar10\", \"solar\", 18, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar11\", \"solar\", 19, 0, banca));\r\n        posiciones.add(arrayCasillasOeste);\r\n        Grupo violeta = new Grupo(arrayCasillasOeste.get(1),arrayCasillasOeste.get(3), arrayCasillasOeste.get(4), \"PURPLE\");\r\n        grupos.put(\"VIOLETA\", violeta);\r\n        Grupo blanco = new Grupo(arrayCasillasOeste.get(6),arrayCasillasOeste.get(7), arrayCasillasOeste.get(9), \"WHITE\");\r\n        grupos.put(\"BLANCO\", blanco);\r\n    }\r\n\r\n    //Método que inserta las casillas del lado este.\r\n    private void insertarLadoEste() {\r\n        ArrayList<Casilla> arrayCasillasEste = new ArrayList<Casilla>();\r\n        arrayCasillasEste.add(new Casilla(\"ircarcel\",\"especial\",30,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar18\",\"solar\",31,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar19\",\"solar\",32,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"caja\",\"caja\",33,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar20\",\"solar\",34,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"trans4\",\"transporte\",35,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"suerte\",\"suerte\",36,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",37,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"imp1\",38,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",39,0,banca));\r\n        posiciones.add(arrayCasillasEste);\r\n        Grupo verde = new Grupo(arrayCasillasEste.get(1),arrayCasillasEste.get(3), arrayCasillasEste.get(4), \"GREEN\");\r\n        grupos.put(\"VERDE\", verde);\r\n        Grupo azul = new Grupo(arrayCasillasEste.get(6),arrayCasillasEste.get(7),\"BLUE\");\r\n        grupos.put(\"AZUL\", azul);\r\n    }\r\n\r\n    //Para imprimir el tablero, modificamos el método toString().\r\n    @Override\r\n    public String toString(){\r\n        int i;\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\");\r\n        for(Casilla ladonorte:posiciones.get(2)){\r\n            sb.append(\"|\").append(ladonorte.getNombre());\r\n            /*for(Avatar avatar:ladonorte.getAvatares()){\r\n                sb.append(String.format(\"&%s\", avatar.getId())).append(\"|\\n\");\r\n            }*/\r\n        }\r\n        sb.append(\"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\");\r\n        for(i = 0; i < 10; i++){\r\n            sb.append(String.format(\"|%s \", posiciones.get(1).get(i).getNombre()));\r\n            /*for(Avatar avatar:posiciones.get(1).get(i).getAvatares()){\r\n                sb.append(String.format(\"&%s|\", avatar.getId()));\r\n            }*/\r\n            sb.append(String.format(\"\\t\\t\\t\\t\\t\\t\\t|%s \", posiciones.get(3).get(i).getNombre()));\r\n            /*for(Avatar avatar:posiciones.get(3).get(i).getAvatares()){\r\n                sb.append(String.format(\"&%s|\\n\", avatar.getId()));\r\n            }*/\r\n            sb.append(\"------\\t\\t\\t\\t\\t\\t\\t------\\n\");\r\n        }\r\n        sb.append(\"------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------\\n\");\r\n\r\n        /*sb.append(String.format(\"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\", posiciones.get(1).get(0), posiciones.get(3).get(0)));\r\n        sb.append(\"------\\t\\t\\t\\t\\t\\t\\t------\\n\");*/ //NO BORRAR QUE ES PA VER\r\n\r\n        for(Casilla ladosur:posiciones.get(0)){\r\n            sb.append(\"|\").append(ladosur.getNombre());\r\n            /*for(Avatar avatar:ladosur.getAvatares()){\r\n                sb.append(String.format(\"&%s\", avatar.getId())).append(\"|\\n\");\r\n            }*/\r\n        }\r\n        return sb.toString();\r\n    }\r\n    \r\n    //Método usado para buscar la casilla con el nombre pasado como argumento:\r\n    public Casilla encontrar_casilla(String nombre){\r\n        for(ArrayList<Casilla> lados:posiciones){\r\n            for (Casilla casilla:lados){\r\n                if (nombre.equals(casilla.getNombre())){\r\n                    return casilla;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"No se ha encontrado la casilla\\n\");\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Tablero.java b/monopoly/Tablero.java
--- a/monopoly/Tablero.java	(revision 723b91b836385eabbd31583319358f0d15d8c997)
+++ b/monopoly/Tablero.java	(date 1728308742802)
@@ -18,7 +18,7 @@
         this.posiciones = new ArrayList<ArrayList<Casilla>>();
         this.grupos = new HashMap<String, Grupo>();
         this.banca = banca;
-        generarCasillas();
+        this.generarCasillas();
     }
 
     public ArrayList<ArrayList<Casilla>> getPosiciones(){
