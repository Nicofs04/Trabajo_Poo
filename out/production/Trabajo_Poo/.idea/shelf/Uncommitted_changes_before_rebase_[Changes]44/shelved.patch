Index: monopoly/Tablero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class Tablero {\r\n    //Atributos.\r\n    private ArrayList<ArrayList<Casilla>> posiciones; //Posiciones del tablero: se define como un arraylist de arraylists de casillas (uno por cada lado del tablero).\r\n    private HashMap<String, Grupo> grupos; //Grupos del tablero, almacenados como un HashMap con clave String (será el color del grupo).\r\n    private Jugador banca; //Un jugador que será la banca.\r\n\r\n    //Constructor: únicamente le pasamos el jugador banca (que se creará desde el menú).\r\n    public Tablero(Jugador banca) {\r\n        this.posiciones = new ArrayList<ArrayList<Casilla>>();\r\n        this.grupos = new HashMap<String, Grupo>();\r\n        this.banca = banca;\r\n        generarCasillas();\r\n    }\r\n\r\n    public ArrayList<ArrayList<Casilla>> getPosiciones(){\r\n        return posiciones;\r\n    }\r\n\r\n    public void setPosiciones(ArrayList<ArrayList<Casilla>> posiciones){\r\n        this.posiciones = posiciones;\r\n    }\r\n\r\n    public HashMap<String, Grupo> getGrupos(){\r\n        return grupos;\r\n    }\r\n\r\n    public void setGrupos(HashMap<String,Grupo> grupos){\r\n        this.grupos = grupos;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n    \r\n    //Método para crear todas las casillas del tablero. Formado a su vez por cuatro métodos (1/lado).\r\n    private void generarCasillas() {\r\n        this.insertarLadoSur();\r\n        this.insertarLadoOeste();\r\n        this.insertarLadoNorte();\r\n        this.insertarLadoEste();\r\n    }\r\n\r\n\r\n    //Método para insertar las casillas del lado norte.\r\n    private void insertarLadoNorte() {\r\n        ArrayList<Casilla> arrayCasillasNorte = new ArrayList<Casilla>();\r\n        arrayCasillasNorte.add(new Casilla(\"Parking\", \"especial\", 20, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar12\",\"solar\", 21, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"suerte\", \"suerte\",22, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar13\", \"solar\",23, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar14\", \"solar\",24, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"trans3\", \"transporte\",25, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar15\", \"solar\",26, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar16\", \"solar\",27, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"serv2\", \"servicio\",28, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar17\", \"solar\",29, 0, banca));\r\n        posiciones.add(arrayCasillasNorte);\r\n        Grupo rojo = new Grupo(arrayCasillasNorte.get(1),arrayCasillasNorte.get(3), arrayCasillasNorte.get(4), \"RED\");\r\n        grupos.put(\"ROJO\", rojo);\r\n        Grupo amarillo = new Grupo(arrayCasillasNorte.get(6),arrayCasillasNorte.get(7), arrayCasillasNorte.get(9), \"BROWN\");\r\n        grupos.put(\"AMARILLO\", amarillo);\r\n    }\r\n\r\n    //Método para insertar las casillas del lado sur.\r\n    private void insertarLadoSur() {\r\n        ArrayList<Casilla> arrayCasillasSur = new ArrayList<Casilla>();\r\n        arrayCasillasSur.add(new Casilla(\"salida\",\"especial\",0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar1\",\"solar\",1,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"caja\",\"caja\",2, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar2\",\"solar\",3,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"imp1\",4,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"trans1\",\"transporte\",5,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar3\",\"solar\",6,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"suerte\",\"suerte\",7, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar4\",\"solar\",8,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar5\",\"solar\",9,0, banca));\r\n        posiciones.add(arrayCasillasSur);\r\n        Grupo negro = new Grupo(arrayCasillasSur.get(1),arrayCasillasSur.get(3),\"BLACK\");\r\n        grupos.put(\"NEGRO\", negro);\r\n        Grupo cyan = new Grupo(arrayCasillasSur.get(6),arrayCasillasSur.get(7), arrayCasillasSur.get(9), \"CYAN\");\r\n        grupos.put(\"CYAN\", cyan);\r\n    }\r\n\r\n    //Método que inserta casillas del lado oeste.\r\n    private void insertarLadoOeste() {\r\n        ArrayList<Casilla> arrayCasillasOeste = new ArrayList<Casilla>();\r\n        arrayCasillasOeste.add(new Casilla(\"carcel\", \"especial\", 10, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar6\", \"solar\", 11, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"serv1\", \"servicio\", 12, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar7\", \"solar\", 13, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar8\", \"solar\", 14, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"trans2\", \"transporte\", 15, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar9\", \"solar\", 16, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"caja\", \"caja\", 17, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar10\", \"solar\", 18, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar11\", \"solar\", 19, 0, banca));\r\n        posiciones.add(arrayCasillasOeste);\r\n        Grupo violeta = new Grupo(arrayCasillasOeste.get(1),arrayCasillasOeste.get(3), arrayCasillasOeste.get(4), \"PURPLE\");\r\n        grupos.put(\"VIOLETA\", violeta);\r\n        Grupo blanco = new Grupo(arrayCasillasOeste.get(6),arrayCasillasOeste.get(7), arrayCasillasOeste.get(9), \"WHITE\");\r\n        grupos.put(\"BLANCO\", blanco);\r\n    }\r\n\r\n    //Método que inserta las casillas del lado este.\r\n    private void insertarLadoEste() {\r\n        ArrayList<Casilla> arrayCasillasEste = new ArrayList<Casilla>();\r\n        arrayCasillasEste.add(new Casilla(\"ircarcel\",\"especial\",30,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar18\",\"solar\",31,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar19\",\"solar\",32,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"caja\",\"caja\",33,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar20\",\"solar\",34,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"trans4\",\"transporte\",35,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"suerte\",\"suerte\",36,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",37,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"imp1\",38,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",39,0,banca));\r\n        posiciones.add(arrayCasillasEste);\r\n        Grupo verde = new Grupo(arrayCasillasEste.get(1),arrayCasillasEste.get(3), arrayCasillasEste.get(4), \"GREEN\");\r\n        grupos.put(\"VERDE\", verde);\r\n        Grupo azul = new Grupo(arrayCasillasEste.get(6),arrayCasillasEste.get(7),\"BLUE\");\r\n        grupos.put(\"AZUL\", azul);\r\n    }\r\n\r\n    //Para imprimir el tablero, modificamos el método toString().\r\n    @Override\r\n    public String toString(){\r\n        int i;\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______\\n\");\r\n        for(Casilla ladonorte:posiciones.get(2)){\r\n            sb.append(\"|\").append(ladonorte.getNombre());\r\n            sb.append(\"  \");\r\n            /*for(Avatar avatar:ladonorte.getAvatares()){\r\n                sb.append(String.format(\"&%s\", avatar.getId())).append(\"|\\n\");\r\n            }*/\r\n            sb.append(\"|\");\r\n        }\r\n        sb.append(\"|\\n______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______\\n\");\r\n        for(i = 0; i < 9; i++){\r\n            sb.append(String.format(\"|%s\", posiciones.get(1).get(i).getNombre()));\r\n            /*for(Avatar avatar:posiciones.get(1).get(i).getAvatares()){\r\n                sb.append(String.format(\"&%s|\", avatar.getId()));\r\n            }*/\r\n            sb.append(String.format(\"\\t\\t\\t\\t\\t\\t\\t\\t    |%s \\n\", posiciones.get(3).get(i).getNombre()));\r\n            /*for(Avatar avatar:posiciones.get(3).get(i).getAvatares()){\r\n                sb.append(String.format(\"&%s|\\n\", avatar.getId()));\r\n            }*/\r\n            \r\n        }\r\n        sb.append(\"|\\n ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼\\n\");\r\n\r\n        /*sb.append(String.format(\"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\", posiciones.get(1).get(0), posiciones.get(3).get(0)));\r\n        sb.append(\"------\\t\\t\\t\\t\\t\\t\\t------\\n\");*/ //NO BORRAR QUE ES PA VER\r\n        \r\n        for(Casilla ladosur:posiciones.get(0)){\r\n                sb.append(\"|\").append(ladosur.getNombre());\r\n\r\n            sb.append(\"  \");\r\n            /*for(Avatar avatar:ladosur.getAvatares()){\r\n                sb.append(String.format(\"&%s\", avatar.getId()));\r\n            }*/\r\n            sb.append(\"|\");\r\n\r\n        }\r\n        sb.append(\"\\n ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺\\n\");\r\n        return sb.toString();\r\n    }\r\n    \r\n    //Método usado para buscar la casilla con el nombre pasado como argumento:\r\n    public Casilla encontrar_casilla(String nombre){\r\n        for(ArrayList<Casilla> lados:posiciones){\r\n            for (Casilla casilla:lados){\r\n                if (nombre.equals(casilla.getNombre())){\r\n                    return casilla;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"No se ha encontrado la casilla\\n\");\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Tablero.java b/monopoly/Tablero.java
--- a/monopoly/Tablero.java	(revision 5a77c04cc270acbc315b2ef1e0f69d3692a3b61b)
+++ b/monopoly/Tablero.java	(date 1728316359001)
@@ -149,33 +149,71 @@
             sb.append("|");
         }
         sb.append("|\n______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______\n");
-        for(i = 0; i < 9; i++){
-            sb.append(String.format("|%s", posiciones.get(1).get(i).getNombre()));
-            /*for(Avatar avatar:posiciones.get(1).get(i).getAvatares()){
-                sb.append(String.format("&%s|", avatar.getId()));
-            }*/
-            sb.append(String.format("\t\t\t\t\t\t\t\t    |%s \n", posiciones.get(3).get(i).getNombre()));
-            /*for(Avatar avatar:posiciones.get(3).get(i).getAvatares()){
-                sb.append(String.format("&%s|\n", avatar.getId()));
-            }*/
-            
+        if(posiciones.get(1).get(0).getAvatares() == null || posiciones.get(3).get(0) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(0).getNombre(), posiciones.get(3).get(0).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(0).getNombre(), posiciones.get(1).get(0).getAvatares(), posiciones.get(3).get(0).getNombre(), posiciones.get(3).get(0).getAvatares()));
+        }if(posiciones.get(1).get(1).getAvatares() == null || posiciones.get(3).get(1) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(1).getNombre(), posiciones.get(3).get(1).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(1).getNombre(), posiciones.get(1).get(1).getAvatares(), posiciones.get(3).get(1).getNombre(), posiciones.get(3).get(1).getAvatares()));
+        }if(posiciones.get(1).get(2).getAvatares() == null || posiciones.get(3).get(2) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(2).getNombre(), posiciones.get(3).get(2).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(2).getNombre(), posiciones.get(1).get(2).getAvatares(), posiciones.get(3).get(2).getNombre(), posiciones.get(3).get(2).getAvatares()));
+        }if(posiciones.get(1).get(3).getAvatares() == null || posiciones.get(3).get(3) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(3).getNombre(), posiciones.get(3).get(3).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(3).getNombre(), posiciones.get(1).get(3).getAvatares(), posiciones.get(3).get(3).getNombre(), posiciones.get(3).get(3).getAvatares()));
+        }if(posiciones.get(1).get(0).getAvatares() == null || posiciones.get(3).get(4) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(4).getNombre(), posiciones.get(3).get(4).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(4).getNombre(), posiciones.get(1).get(4).getAvatares(), posiciones.get(3).get(4).getNombre(), posiciones.get(3).get(4).getAvatares()));
+        }if(posiciones.get(1).get(5).getAvatares() == null || posiciones.get(3).get(5) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(5).getNombre(), posiciones.get(3).get(5).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(5).getNombre(), posiciones.get(1).get(5).getAvatares(), posiciones.get(3).get(5).getNombre(), posiciones.get(1).get(5).getAvatares()));
+        }if(posiciones.get(1).get(6).getAvatares() == null || posiciones.get(3).get(6) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(6).getNombre(), posiciones.get(3).get(6).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(6).getNombre(), posiciones.get(1).get(6).getAvatares(), posiciones.get(3).get(6).getNombre(), posiciones.get(1).get(6).getAvatares()));
+        }if(posiciones.get(1).get(7).getAvatares() == null || posiciones.get(3).get(7) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(7).getNombre(), posiciones.get(3).get(7).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(7).getNombre(), posiciones.get(1).get(7).getAvatares(), posiciones.get(3).get(7).getNombre(), posiciones.get(1).get(7).getAvatares()));
+        }if(posiciones.get(1).get(8).getAvatares() == null || posiciones.get(3).get(8) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(8).getNombre(), posiciones.get(3).get(8).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(8).getNombre(), posiciones.get(1).get(8).getAvatares(), posiciones.get(3).get(8).getNombre(), posiciones.get(1).get(8).getAvatares()));
+        }if(posiciones.get(1).get(9).getAvatares() == null || posiciones.get(3).get(9) == null){
+            sb.append(String.format("|%s   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  |\n", posiciones.get(1).get(9).getNombre(), posiciones.get(3).get(9).getNombre()));
+
+        }else{
+            sb.append(String.format("|%s   &%s|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |%s  &%s|\n", posiciones.get(1).get(9).getNombre(), posiciones.get(1).get(9).getAvatares(), posiciones.get(3).get(9).getNombre(), posiciones.get(1).get(9).getAvatares()));
         }
-        sb.append("|\n ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼\n");
+        sb.append(" ⎼⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼⎼ ⎼⎼⎼⎼⎼⎼⎼⎼⎼\n");
 
         /*sb.append(String.format("|%s|\t\t\t\t\t\t\t|%s|\n", posiciones.get(1).get(0), posiciones.get(3).get(0)));
         sb.append("------\t\t\t\t\t\t\t------\n");*/ //NO BORRAR QUE ES PA VER
-        
-        for(Casilla ladosur:posiciones.get(0)){
-                sb.append("|").append(ladosur.getNombre());
+
+        for (i = posiciones.get(0).size() - 1; i >= 0; i--) {
+            Casilla ladosur = posiciones.get(0).get(i);
+            sb.append("|").append(ladosur.getNombre());
 
-            sb.append("  ");
-            /*for(Avatar avatar:ladosur.getAvatares()){
-                sb.append(String.format("&%s", avatar.getId()));
-            }*/
-            sb.append("|");
-
-        }
-        sb.append("\n ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺\n");
+            sb.append("   ");
+        }
+
+        sb.append("|");
+        sb.append("\n ⎺⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺⎺ ⎺⎺⎺⎺⎺⎺⎺⎺⎺\n");
         return sb.toString();
     }
     
