Index: monopoly/Casilla.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Casilla {\r\n\r\n    // Atributos:\r\n    private String nombre; // Nombre de la casilla\r\n    private String tipo; // Tipo de casilla (Solar, Especial, Transporte, Servicios, Comunidad).\r\n    private float valor; // Valor de esa casilla (en la mayoría será valor de compra, en la casilla\r\n                         // parking se usará como el bote).\r\n    private int posicion; // Posición que ocupa la casilla en el tablero (entero entre 1 y 40).\r\n    private Jugador duenho; // Dueño de la casilla (por defecto sería la banca).\r\n    private Grupo grupo; // Grupo al que pertenece la casilla (si es solar).\r\n    private float impuesto; // Cantidad a pagar por caer en la casilla: el alquiler en\r\n                            // solares/servicios/transportes o impuestos.\r\n    private float hipoteca; // Valor otorgado por hipotecar una casilla\r\n    private ArrayList<Avatar> avatares; // Avatares que están situados en la casilla.\r\n    private Scanner scanner = new Scanner(System.in);\r\n\r\n    private ArrayList<ArrayList<Casilla>> tablero; // TABLERO, NECESARIO PARA LA FUNCION EVALUARCASILLA\r\n\r\n    // Constructores:\r\n    public Casilla() {\r\n    }// Parámetros vacíos\r\n\r\n    /*\r\n     * Constructor para casillas tipo Solar, Servicios o Transporte:\r\n     * Parámetros: nombre casilla, tipo (debe ser solar, serv. o transporte),\r\n     * posición en el tablero, valor y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, float valor, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.valor = valor;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para inicializar las casillas de tipo IMPUESTOS.\r\n     * Parámetros: nombre, posición en el tablero, impuesto establecido y dueño.\r\n     */\r\n    public Casilla(String nombre, int posicion, float impuesto, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.posicion = posicion;\r\n        this.impuesto = impuesto;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    /*\r\n     * Constructor utilizado para crear las otras casillas (Suerte, Caja de\r\n     * comunidad y Especiales):\r\n     * Parámetros: nombre, tipo de la casilla (será uno de los que queda), posición\r\n     * en el tablero y dueño.\r\n     */\r\n    public Casilla(String nombre, String tipo, int posicion, Jugador duenho) {\r\n        this.nombre = nombre;\r\n        this.tipo = tipo;\r\n        this.posicion = posicion;\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public String getTipo() {\r\n        return tipo;\r\n    }\r\n\r\n    public void setTipo(String tipo) {\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    public float getValor() {\r\n        return valor;\r\n    }\r\n\r\n    public void setValor(float valor) {\r\n        this.valor = valor;\r\n    }\r\n\r\n    public int getPosicion() {\r\n        return posicion;\r\n    }\r\n\r\n    public void setPosicion(int posicion) {\r\n        this.posicion = posicion;\r\n    }\r\n\r\n    public Jugador getDuenho() {\r\n        return duenho;\r\n    }\r\n\r\n    public void setDuenho(Jugador duenho) {\r\n        this.duenho = duenho;\r\n    }\r\n\r\n    public Grupo getGrupo() { // mirar la clase grupo(puse public class en lugar de class a secas)\r\n        return grupo;\r\n    }\r\n\r\n    public void setGrupo(Grupo grupo) {\r\n        this.grupo = grupo;\r\n    }\r\n\r\n    public float getImpuesto() {\r\n        return impuesto;\r\n    }\r\n\r\n    public void setImpuesto(float impuesto) {\r\n        this.impuesto = impuesto;\r\n    }\r\n\r\n    public float getHipoteca() {\r\n        return hipoteca;\r\n    }\r\n\r\n    public void setHipoteca(float hipoteca) {\r\n        this.hipoteca = hipoteca;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares() {\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares) { // AL SER UN ARRAY TENGO QUE ITERAR CADA UNA DE SUS POSICIONES\r\n                                                          // O ASÍ ESTÁ BIEN?\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        if (this.tipo == \"solar\") {\r\n            return \"nombre: \" + getNombre() + \",\\n tipo: \" + getTipo() + \",\\n valor: \" + getValor()\r\n                    + \",\\n Propietario: \"\r\n                    + getDuenho() + \",\\n Posición:\" + getPosicion() + \",\\n Grupo:\" + getGrupo() + \",\\n Impuesto:\"\r\n                    + getImpuesto() + \",\\n alquiler: \" + \"220000\" +\r\n                    \",\\n valor hotel: \" + \"1560000\" + \",\\n valor casa: \" + \"1560000\" + \",\\n valor piscina: \" + \"1040000\"\r\n                    + \",\\n valor pista de deportes: \"\r\n                    + \"3250000\" + \",\\n alquiler de una casa: \" + \"1100000\" + \",\\n alquiler dos casas: \" + \"3300000\" +\r\n                    \",\\n alquiler tres casas: \" + \"7700000\" + \",\\n alquiler cuatro casas: \" + \"11000000\"\r\n                    + \",\\n alquiler hotel: \" +\r\n                    \"15400000\" + \",\\n alquiler piscina: \" + \"5500000\" + \",\\n alquiler pista de deporte: \" + \"5500000\";\r\n        } else if (this.tipo == \"transporte\" || this.tipo == \"servicio\") {\r\n            return \"nombre: \" + getNombre() + \",\\n tipo: \" + getTipo() + \",\\n valor: \" + getValor()\r\n                    + \",\\n Propietario: \"\r\n                    + getDuenho() + \",\\n Posición:\" + getPosicion() + \",\\n Impuesto:\" + getImpuesto();\r\n        } else if (this.tipo == \"impuesto\") {\r\n            return \"tipo: \" + getTipo() + \",\\n Impuesto:\" + getImpuesto();\r\n\r\n        } else if (this.tipo == \"especial\" && this.posicion == 20) {\r\n            // LISTA DE LOS JUGADORES\r\n            StringBuilder jugadoresEnCasilla = new StringBuilder();\r\n            for (int i = 0; i < this.avatares.size(); i++) {\r\n                jugadoresEnCasilla.append(avatares.get(i).getJugador().getNombre()).append(\", \"); // Cambia getNombre\r\n                                                                                                  // por el método que\r\n                                                                                                  // devuelva el nombre\r\n                                                                                                  // del jugador\r\n            }\r\n\r\n            // Eliminar la última coma y espacio\r\n            if (jugadoresEnCasilla.length() > 0) {\r\n                jugadoresEnCasilla.setLength(jugadoresEnCasilla.length() - 2);\r\n            }\r\n\r\n            return \"bote: \" + getValor() + \",\\n jugadores:\" + jugadoresEnCasilla;\r\n        } else if (this.tipo == \"especial\" && this.posicion == 10) {\r\n            // FALTA PRECIO PARA SALIR\r\n            // LISTA DE LOS JUGADORES\r\n            StringBuilder jugadoresEnCasilla = new StringBuilder();\r\n            for (int i = 0; i < this.avatares.size(); i++) {\r\n                jugadoresEnCasilla.append(avatares.get(i).getJugador().getNombre()).append(\", \"); // Cambia getNombre\r\n                                                                                                  // por el método que\r\n                                                                                                  // devuelva el nombre\r\n                                                                                                  // del jugador\r\n            }\r\n\r\n            // Eliminar la última coma y espacio\r\n            if (jugadoresEnCasilla.length() > 0) {\r\n                jugadoresEnCasilla.setLength(jugadoresEnCasilla.length() - 2);\r\n            }\r\n\r\n            return \"salir: \" +/*PRECIO PARA SALIR */ +\",\\n jugadores:\" + jugadoresEnCasilla;\r\n        } else if (this.tipo == \"especial\" && this.posicion == 0) {\r\n            // LISTA DE LOS JUGADORES\r\n            StringBuilder jugadoresEnCasilla = new StringBuilder();\r\n            for (int i = 0; i < this.avatares.size(); i++) {\r\n                jugadoresEnCasilla.append(avatares.get(i).getJugador().getNombre()).append(\", \"); // Cambia getNombre\r\n                                                                                                  // por el método que\r\n                                                                                                  // devuelva el nombre\r\n                                                                                                  // del jugador\r\n            }\r\n\r\n            // Eliminar la última coma y espacio\r\n            if (jugadoresEnCasilla.length() > 0) {\r\n                jugadoresEnCasilla.setLength(jugadoresEnCasilla.length() - 2);\r\n            }\r\n            return \"nombre: \" + getNombre() + \",\\n jugadores:\" + jugadoresEnCasilla;\r\n        }\r\n    }\r\n\r\n    // Método utilizado para añadir un avatar al array de avatares en casilla.\r\n    public void anhadirAvatar(Avatar av) {\r\n        this.avatares.add(av);\r\n    }\r\n\r\n    // Método utilizado para eliminar un avatar del array de avatares en casilla.\r\n    public void eliminarAvatar(Avatar av) {\r\n        this.avatares.remove(av);\r\n    }\r\n\r\n    /*\r\n     * Método para evaluar qué hacer en una casilla concreta. Parámetros:\r\n     * - Jugador cuyo avatar está en esa casilla.\r\n     * - La banca (para ciertas comprobaciones).\r\n     * - El valor de la tirada: para determinar impuesto a pagar en casillas de\r\n     * servicios.\r\n     * Valor devuelto: true en caso de ser solvente (es decir, de cumplir las\r\n     * deudas), y false\r\n     * en caso de no cumplirlas.\r\n     */\r\n\r\n    // FALTAN HACER RETOQUES A TABLERO PARA QUE FUNCIONE\r\n    public boolean evaluarCasilla(Jugador actual, Jugador banca, int tirada) {\r\n        //NO EVALUAMOS EN ESTA FUNCION LAS CASILLAS: Salida(especial), Carcel(especial)\r\n        //PARKING, en este caso siempre va a ser true ya que la recaudacion de impuestos siempre va a ser >=0\r\n        Casilla c = actual.getAvatar().getLugar();\r\n        switch (c.getTipo()) {\r\n            case \"solar\":\r\n                if(actual.getFortuna()<this.impuesto){\r\n                    System.out.println(\"El jugador no tiene dinero suficiente para pagar el alquiler, por lo que debe declararse en bancarrota o hipotecar alguna propiedad\");\r\n                    return false;\r\n                    //Acabaría la partida para este jugador\r\n                }else{\r\n                    actual.setFortuna(actual.getFortuna()-this.impuesto);\r\n                    this.duenho.setFortuna((duenho.getFortuna()+this.impuesto));\r\n                    return true;\r\n                }\r\n            case \"servicio\": //NO SE SI HAY QUE HACER LO DE LAS TIRADAS\r\n                if(actual.getFortuna()<this.impuesto){\r\n                    System.out.println(\"El jugador no tiene dinero suficiente para pagar el servicio, por lo que debe declararse en bancarrota o hipotecar alguna propiedad\");\r\n                    return false;\r\n                    //Acabaría la partida para este jugador\r\n                }else{\r\n                    actual.setFortuna(actual.getFortuna()-this.impuesto);\r\n                    this.duenho.setFortuna((duenho.getFortuna()+this.impuesto));\r\n                    return true;\r\n                }\r\n            case \"transporte\":\r\n            if(actual.getFortuna()<this.impuesto){\r\n                System.out.println(\"El jugador no tiene dinero suficiente para pagar el transporte, por lo que debe declararse en bancarrota o hipotecar alguna propiedad\");\r\n                return false;\r\n                //Acabaría la partida para este jugador\r\n            }else{\r\n                actual.setFortuna(actual.getFortuna()-this.impuesto);\r\n                this.duenho.setFortuna((duenho.getFortuna()+this.impuesto));\r\n                return true;\r\n            }\r\n            //No es para esta entrega\r\n            case \"suerte\":\r\n                break;\r\n            //No es para esta entrega\r\n            case \"caja\":\r\n                break;\r\n            case \"impuesto\":\r\n                if(actual.getFortuna()<this.impuesto){\r\n                    System.out.println(\"El jugador no tiene dinero suficiente para pagar los impuestos, por lo que debe declararse en bancarrota o hipotecar alguna propiedad\");\r\n                    return false;\r\n                    //Acabaría la partida para este jugador\r\n                }else{\r\n                    actual.setFortuna(actual.getFortuna()-this.impuesto);\r\n                    //Le pagamos a la banca:\r\n                    banca.setFortuna(banca.getFortuna()+this.impuesto);\r\n                    return true;\r\n                }\r\n            case \"especial\":\r\n                //PARKING\r\n                if((this.tipo==\"especial\" && this.posicion==20)){\r\n                    actual.setFortuna(actual.getFortuna()+this.valor);\r\n                    this.valor=0;\r\n                    return true;\r\n                //IR A CARCEL\r\n                }else if(this.tipo==\"especial\"&& this.posicion==30){\r\n                    //Necesito un tablero\r\n                    actual.encarcelar(/*tablero */);\r\n                    return true;\r\n            default:\r\n                System.out.println(\"El tipo de la casilla está mal definido\");\r\n\r\n        }\r\n\r\n    /*\r\n     * Método usado para comprar una casilla determinada. Parámetros:\r\n     * - Jugador que solicita la compra de la casilla.\r\n     * - Banca del monopoly (es el dueño de las casillas no compradas aún).\r\n     */\r\n\r\n    /*\r\n     * SOLO SE PUEDEN COMPRAR LAS CASILLAS DE TIPO SOLAR,SERVICIOS Y TRANSPORTE,\r\n     * TIENE QUE TENER DINERO SUFICIENTE EL SOLICITANTE, y el dueño tiene que ser la\r\n     * banca\r\n     * ,\r\n     * Al solicitante hay que asignarle la propiedad, quitarle la pasta y sumarle\r\n     * los gastos, a la banca quitarle\r\n     * la propiedad y darle la pasta y hay que asignar el nuevo dueño a la casilla,\r\n     * que será el solicitante\r\n     */\r\n    public void comprarCasilla(Jugador solicitante, Jugador banca) {\r\n        // Comprobamos que sea una casilla \"comprable\"\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))\r\n                && (solicitante.getFortuna() >= this.valor) && (this.duenho == banca)) {\r\n\r\n            // JUGADOR SOLICITANTE\r\n\r\n            // \"quitar pasta\"\r\n            solicitante.setFortuna(solicitante.getFortuna() - this.valor);\r\n\r\n            // \"sumar gastos\"\r\n            solicitante.setGastos(solicitante.getGastos() + this.valor);\r\n\r\n            // \"asignarle la propiedad\"\r\n            // Primero tenemos que cambiarle el dueño a la casilla\r\n            this.duenho = solicitante;\r\n            solicitante.getPropiedades().add(this);\r\n\r\n            // BANCA, aunque realmente es innecesario\r\n            banca.setFortuna(banca.getFortuna() + this.valor);\r\n\r\n            System.out.println(\"El jugador \" + solicitante.getNombre() + \"compra la casilla \"\r\n                    + solicitante.getAvatar().getLugar().getNombre() + \"por \" + this.valor);\r\n            System.out.println(\"Su fortuna actual es:\" + solicitante.getFortuna());\r\n\r\n        } else if ((this.tipo != \"Solar\") && (this.tipo != \"Servicios\") && (this.tipo != \"Transporte\")) {\r\n            // En caso de que no sea de ninguno de estos tipos, la propiedad no se podrá\r\n            // comprar\r\n            System.out.println(\r\n                    \"Esta propiedad no se puede comprar, para poder comprar una propiedad debe de ser de uno de los siguientes tipos: SOLAR, TRANSPORTE, SERVICIOS\\n\");\r\n        } else {\r\n            System.out.println(\"No tienes dinero suficiente como para comprar esta propiedad\\n\");\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * Método para añadir valor a una casilla. Utilidad:\r\n     * - Sumar valor a la casilla de parking.\r\n     * - Sumar valor a las casillas de solar al no comprarlas tras cuatro vueltas de\r\n     * todos los jugadores.\r\n     * Este método toma como argumento la cantidad a añadir del valor de la casilla.\r\n     */\r\n\r\n    public void sumarValor(float suma) {\r\n        this.valor += suma;\r\n    }\r\n\r\n    /*\r\n     * Método para mostrar información sobre una casilla.\r\n     * Devuelve una cadena con información específica de cada tipo de casilla.\r\n     */\r\n    public String infoCasilla() {\r\n        String informacion = this.toString();\r\n        return informacion;\r\n    }\r\n\r\n    /*\r\n     * Método para mostrar información de una casilla en venta.\r\n     * Valor devuelto: texto con esa información.\r\n     */\r\n    public String casEnVenta() {\r\n        // Para mostrar la informacion tiene que estar en venta, y para estar en venta,\r\n        // el dueño tiene que ser la banca y cumplir los requisitos del primer if de\r\n        // \"comprarCasilla\"\r\n        // DOY POR HECHO QUE EL JUGADOR BANCA DE LLAMA \"banca\", si no habría que pasarle\r\n        // la banca como parámetro a la función\r\n        if (((this.tipo == \"Solar\") || (this.tipo == \"Servicios\") || (this.tipo == \"Transporte\"))\r\n                && (this.duenho.getNombre() == \"Banca\")) {\r\n            String texto = this.toString();\r\n            return texto;\r\n        } else {\r\n            String texto = String.format(\"Esta casilla no está a la venta\\n\");\r\n            return texto;\r\n        }\r\n    }\r\n\r\n    public String generarCasilla(int posicion) {\r\n        return this.nombre;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Casilla.java b/monopoly/Casilla.java
--- a/monopoly/Casilla.java	(revision d246b314fa39c90ade5e9e698081c40ff5de6438)
+++ b/monopoly/Casilla.java	(date 1728386404518)
@@ -141,7 +141,7 @@
         if (this.tipo == "solar") {
             return "nombre: " + getNombre() + ",\n tipo: " + getTipo() + ",\n valor: " + getValor()
                     + ",\n Propietario: "
-                    + getDuenho() + ",\n Posición:" + getPosicion() + ",\n Grupo:" + getGrupo() + ",\n Impuesto:"
+                    + getDuenho().getNombre() + ",\n Posición:" + getPosicion() + ",\n Grupo:" + getGrupo().getColorGrupo() + ",\n Impuesto:"
                     + getImpuesto() + ",\n alquiler: " + "220000" +
                     ",\n valor hotel: " + "1560000" + ",\n valor casa: " + "1560000" + ",\n valor piscina: " + "1040000"
                     + ",\n valor pista de deportes: "
@@ -152,7 +152,7 @@
         } else if (this.tipo == "transporte" || this.tipo == "servicio") {
             return "nombre: " + getNombre() + ",\n tipo: " + getTipo() + ",\n valor: " + getValor()
                     + ",\n Propietario: "
-                    + getDuenho() + ",\n Posición:" + getPosicion() + ",\n Impuesto:" + getImpuesto();
+                    + getDuenho().getNombre() + ",\n Posición:" + getPosicion() + ",\n Impuesto:" + getImpuesto();
         } else if (this.tipo == "impuesto") {
             return "tipo: " + getTipo() + ",\n Impuesto:" + getImpuesto();
 
@@ -188,13 +188,12 @@
                 jugadoresEnCasilla.setLength(jugadoresEnCasilla.length() - 2);
             }
 
-            return "salir: " +/*PRECIO PARA SALIR */ +",\n jugadores:" + jugadoresEnCasilla;
+            return "salir: " +/*PRECIO PARA SALIR */ ",\n jugadores:" + jugadoresEnCasilla;
         } else if (this.tipo == "especial" && this.posicion == 0) {
             // LISTA DE LOS JUGADORES
             StringBuilder jugadoresEnCasilla = new StringBuilder();
             for (int i = 0; i < this.avatares.size(); i++) {
                 jugadoresEnCasilla.append(avatares.get(i).getJugador().getNombre()).append(", "); // Cambia getNombre
-                                                                                                  // por el método que
                                                                                                   // devuelva el nombre
                                                                                                   // del jugador
             }
@@ -205,6 +204,7 @@
             }
             return "nombre: " + getNombre() + ",\n jugadores:" + jugadoresEnCasilla;
         }
+        return "Tipo o posición desconocida\n";
     }
 
     // Método utilizado para añadir un avatar al array de avatares en casilla.
@@ -235,119 +235,122 @@
         Casilla c = actual.getAvatar().getLugar();
         switch (c.getTipo()) {
             case "solar":
-                if(actual.getFortuna()<this.impuesto){
+                if (actual.getFortuna() < this.impuesto) {
                     System.out.println("El jugador no tiene dinero suficiente para pagar el alquiler, por lo que debe declararse en bancarrota o hipotecar alguna propiedad");
                     return false;
                     //Acabaría la partida para este jugador
-                }else{
-                    actual.setFortuna(actual.getFortuna()-this.impuesto);
-                    this.duenho.setFortuna((duenho.getFortuna()+this.impuesto));
+                } else {
+                    actual.setFortuna(actual.getFortuna() - this.impuesto);
+                    this.duenho.setFortuna((duenho.getFortuna() + this.impuesto));
                     return true;
                 }
             case "servicio": //NO SE SI HAY QUE HACER LO DE LAS TIRADAS
-                if(actual.getFortuna()<this.impuesto){
+                if (actual.getFortuna() < this.impuesto) {
                     System.out.println("El jugador no tiene dinero suficiente para pagar el servicio, por lo que debe declararse en bancarrota o hipotecar alguna propiedad");
                     return false;
                     //Acabaría la partida para este jugador
-                }else{
-                    actual.setFortuna(actual.getFortuna()-this.impuesto);
-                    this.duenho.setFortuna((duenho.getFortuna()+this.impuesto));
+                } else {
+                    actual.setFortuna(actual.getFortuna() - this.impuesto);
+                    this.duenho.setFortuna((duenho.getFortuna() + this.impuesto));
                     return true;
                 }
             case "transporte":
-            if(actual.getFortuna()<this.impuesto){
-                System.out.println("El jugador no tiene dinero suficiente para pagar el transporte, por lo que debe declararse en bancarrota o hipotecar alguna propiedad");
-                return false;
-                //Acabaría la partida para este jugador
-            }else{
-                actual.setFortuna(actual.getFortuna()-this.impuesto);
-                this.duenho.setFortuna((duenho.getFortuna()+this.impuesto));
-                return true;
-            }
-            //No es para esta entrega
+                if (actual.getFortuna() < this.impuesto) {
+                    System.out.println("El jugador no tiene dinero suficiente para pagar el transporte, por lo que debe declararse en bancarrota o hipotecar alguna propiedad");
+                    return false;
+                    //Acabaría la partida para este jugador
+                } else {
+                    actual.setFortuna(actual.getFortuna() - this.impuesto);
+                    this.duenho.setFortuna((duenho.getFortuna() + this.impuesto));
+                    return true;
+                }
+                //No es para esta entrega
             case "suerte":
                 break;
             //No es para esta entrega
             case "caja":
                 break;
             case "impuesto":
-                if(actual.getFortuna()<this.impuesto){
+                if (actual.getFortuna() < this.impuesto) {
                     System.out.println("El jugador no tiene dinero suficiente para pagar los impuestos, por lo que debe declararse en bancarrota o hipotecar alguna propiedad");
                     return false;
                     //Acabaría la partida para este jugador
-                }else{
-                    actual.setFortuna(actual.getFortuna()-this.impuesto);
+                } else {
+                    actual.setFortuna(actual.getFortuna() - this.impuesto);
                     //Le pagamos a la banca:
-                    banca.setFortuna(banca.getFortuna()+this.impuesto);
+                    banca.setFortuna(banca.getFortuna() + this.impuesto);
                     return true;
                 }
             case "especial":
                 //PARKING
-                if((this.tipo=="especial" && this.posicion==20)){
-                    actual.setFortuna(actual.getFortuna()+this.valor);
-                    this.valor=0;
+                if ((this.tipo == "especial" && this.posicion == 20)) {
+                    actual.setFortuna(actual.getFortuna() + this.valor);
+                    this.valor = 0;
                     return true;
-                //IR A CARCEL
-                }else if(this.tipo=="especial"&& this.posicion==30){
+                    //IR A CARCEL
+                } else if (this.tipo == "especial" && this.posicion == 30) {
                     //Necesito un tablero
-                    actual.encarcelar(/*tablero */);
+                    actual.encarcelar(tablero);
                     return true;
+                }
             default:
                 System.out.println("El tipo de la casilla está mal definido");
-
+                break;
         }
+        return false;
+    }
 
-    /*
-     * Método usado para comprar una casilla determinada. Parámetros:
-     * - Jugador que solicita la compra de la casilla.
-     * - Banca del monopoly (es el dueño de las casillas no compradas aún).
-     */
+        /*
+         * Método usado para comprar una casilla determinada. Parámetros:
+         * - Jugador que solicita la compra de la casilla.
+         * - Banca del monopoly (es el dueño de las casillas no compradas aún).
+         */
 
-    /*
-     * SOLO SE PUEDEN COMPRAR LAS CASILLAS DE TIPO SOLAR,SERVICIOS Y TRANSPORTE,
-     * TIENE QUE TENER DINERO SUFICIENTE EL SOLICITANTE, y el dueño tiene que ser la
-     * banca
-     * ,
-     * Al solicitante hay que asignarle la propiedad, quitarle la pasta y sumarle
-     * los gastos, a la banca quitarle
-     * la propiedad y darle la pasta y hay que asignar el nuevo dueño a la casilla,
-     * que será el solicitante
-     */
-    public void comprarCasilla(Jugador solicitante, Jugador banca) {
-        // Comprobamos que sea una casilla "comprable"
-        if (((this.tipo == "Solar") || (this.tipo == "Servicios") || (this.tipo == "Transporte"))
-                && (solicitante.getFortuna() >= this.valor) && (this.duenho == banca)) {
+        /*
+         * SOLO SE PUEDEN COMPRAR LAS CASILLAS DE TIPO SOLAR,SERVICIOS Y TRANSPORTE,
+         * TIENE QUE TENER DINERO SUFICIENTE EL SOLICITANTE, y el dueño tiene que ser la
+         * banca
+         * ,
+         * Al solicitante hay que asignarle la propiedad, quitarle la pasta y sumarle
+         * los gastos, a la banca quitarle
+         * la propiedad y darle la pasta y hay que asignar el nuevo dueño a la casilla,
+         * que será el solicitante
+         */
+        public void comprarCasilla (Jugador solicitante, Jugador banca){
+            // Comprobamos que sea una casilla "comprable"
+            if (((this.tipo.equals("Solar")) || (this.tipo.equals("Servicios")) || (this.tipo.equals("Transporte")))
+                    && (solicitante.getFortuna() >= this.valor) && (this.duenho == banca)) {
 
-            // JUGADOR SOLICITANTE
+                // JUGADOR SOLICITANTE
 
-            // "quitar pasta"
-            solicitante.setFortuna(solicitante.getFortuna() - this.valor);
+                // "quitar pasta"
+                solicitante.setFortuna(solicitante.getFortuna() - this.valor);
 
-            // "sumar gastos"
-            solicitante.setGastos(solicitante.getGastos() + this.valor);
+                // "sumar gastos"
+                solicitante.setGastos(solicitante.getGastos() + this.valor);
 
-            // "asignarle la propiedad"
-            // Primero tenemos que cambiarle el dueño a la casilla
-            this.duenho = solicitante;
-            solicitante.getPropiedades().add(this);
+                // "asignarle la propiedad"
+                // Primero tenemos que cambiarle el dueño a la casilla
+                this.duenho = solicitante;
+                solicitante.getPropiedades().add(this);
 
-            // BANCA, aunque realmente es innecesario
-            banca.setFortuna(banca.getFortuna() + this.valor);
+                // BANCA, aunque realmente es innecesario
+                banca.setFortuna(banca.getFortuna() + this.valor);
 
-            System.out.println("El jugador " + solicitante.getNombre() + "compra la casilla "
-                    + solicitante.getAvatar().getLugar().getNombre() + "por " + this.valor);
-            System.out.println("Su fortuna actual es:" + solicitante.getFortuna());
+                System.out.println("El jugador " + solicitante.getNombre() + "compra la casilla "
+                        + solicitante.getAvatar().getLugar().getNombre() + "por " + this.valor);
+                System.out.println("Su fortuna actual es:" + solicitante.getFortuna());
 
-        } else if ((this.tipo != "Solar") && (this.tipo != "Servicios") && (this.tipo != "Transporte")) {
-            // En caso de que no sea de ninguno de estos tipos, la propiedad no se podrá
-            // comprar
-            System.out.println(
-                    "Esta propiedad no se puede comprar, para poder comprar una propiedad debe de ser de uno de los siguientes tipos: SOLAR, TRANSPORTE, SERVICIOS\n");
-        } else {
-            System.out.println("No tienes dinero suficiente como para comprar esta propiedad\n");
-        }
+            } else if ((this.tipo != "Solar") && (this.tipo != "Servicios") && (this.tipo != "Transporte")) {
+                // En caso de que no sea de ninguno de estos tipos, la propiedad no se podrá
+                // comprar
+                System.out.println(
+                        "Esta propiedad no se puede comprar, para poder comprar una propiedad debe de ser de uno de los siguientes tipos: SOLAR, TRANSPORTE, SERVICIOS\n");
+            } else {
+                System.out.println("No tienes dinero suficiente como para comprar esta propiedad\n");
+            }
 
-    }
+        }
 
     /*
      * Método para añadir valor a una casilla. Utilidad:
@@ -356,17 +359,18 @@
      * todos los jugadores.
      * Este método toma como argumento la cantidad a añadir del valor de la casilla.
      */
-
+/*
     public void sumarValor(float suma) {
         this.valor += suma;
-    }
+    }*/
 
     /*
      * Método para mostrar información sobre una casilla.
      * Devuelve una cadena con información específica de cada tipo de casilla.
      */
     public String infoCasilla() {
-        String informacion = this.toString();
+        String informacion = new String();
+        informacion = this.toString();
         return informacion;
     }
 
Index: monopoly/Tablero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport partida.*;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class Tablero {\r\n    //Atributos.\r\n    private ArrayList<ArrayList<Casilla>> posiciones; //Posiciones del tablero: se define como un arraylist de arraylists de casillas (uno por cada lado del tablero).\r\n    private HashMap<String, Grupo> grupos; //Grupos del tablero, almacenados como un HashMap con clave String (será el color del grupo).\r\n    private Jugador banca; //Un jugador que será la banca.\r\n\r\n    //Constructor: únicamente le pasamos el jugador banca (que se creará desde el menú).\r\n    public Tablero(Jugador banca) {\r\n        this.posiciones = new ArrayList<ArrayList<Casilla>>();\r\n        this.grupos = new HashMap<String, Grupo>();\r\n        this.banca = banca;\r\n        generarCasillas();\r\n    }\r\n\r\n    public ArrayList<ArrayList<Casilla>> getPosiciones(){\r\n        return posiciones;\r\n    }\r\n\r\n    public void setPosiciones(ArrayList<ArrayList<Casilla>> posiciones){\r\n        this.posiciones = posiciones;\r\n    }\r\n\r\n    public HashMap<String, Grupo> getGrupos(){\r\n        return grupos;\r\n    }\r\n\r\n    public void setGrupos(HashMap<String,Grupo> grupos){\r\n        this.grupos = grupos;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n    \r\n    //Método para crear todas las casillas del tablero. Formado a su vez por cuatro métodos (1/lado).\r\n    private void generarCasillas() {\r\n        this.insertarLadoSur();\r\n        this.insertarLadoOeste();\r\n        this.insertarLadoNorte();\r\n        this.insertarLadoEste();\r\n    }\r\n\r\n\r\n    //Método para insertar las casillas del lado norte.\r\n    private void insertarLadoNorte() {\r\n        ArrayList<Casilla> arrayCasillasNorte = new ArrayList<Casilla>();\r\n        arrayCasillasNorte.add(new Casilla(\"Parking\", \"especial\", 20, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar12\",\"solar\", 21, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"suerte\", \"suerte\",22, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar13\", \"solar\",23, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar14\", \"solar\",24, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"trans3\", \"transporte\",25, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar15\", \"solar\",26, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar16\", \"solar\",27, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"serv2\", \"servicio\",28, 0, banca));\r\n        arrayCasillasNorte.add(new Casilla(\"solar17\", \"solar\",29, 0, banca));\r\n        posiciones.add(arrayCasillasNorte);\r\n        Grupo rojo = new Grupo(arrayCasillasNorte.get(1),arrayCasillasNorte.get(3), arrayCasillasNorte.get(4), \"RED\");\r\n        grupos.put(\"ROJO\", rojo);\r\n        Grupo amarillo = new Grupo(arrayCasillasNorte.get(6),arrayCasillasNorte.get(7), arrayCasillasNorte.get(9), \"BROWN\");\r\n        grupos.put(\"AMARILLO\", amarillo);\r\n    }\r\n\r\n    //Método para insertar las casillas del lado sur.\r\n    private void insertarLadoSur() {\r\n        ArrayList<Casilla> arrayCasillasSur = new ArrayList<Casilla>();\r\n        arrayCasillasSur.add(new Casilla(\"salida\",\"especial\",0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar1\",\"solar\",1,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"caja\",\"caja\",2, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar2\",\"solar\",3,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"imp1\",4,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"trans1\",\"transporte\",5,87030, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar3\",\"solar\",6,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"suerte\",\"suerte\",7, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar4\",\"solar\",8,0, banca));\r\n        arrayCasillasSur.add(new Casilla(\"solar5\",\"solar\",9,0, banca));\r\n        posiciones.add(arrayCasillasSur);\r\n        Grupo negro = new Grupo(arrayCasillasSur.get(1),arrayCasillasSur.get(3),\"BLACK\");\r\n        grupos.put(\"NEGRO\", negro);\r\n        Grupo cyan = new Grupo(arrayCasillasSur.get(6),arrayCasillasSur.get(7), arrayCasillasSur.get(9), \"CYAN\");\r\n        grupos.put(\"CYAN\", cyan);\r\n    }\r\n\r\n    //Método que inserta casillas del lado oeste.\r\n    private void insertarLadoOeste() {\r\n        ArrayList<Casilla> arrayCasillasOeste = new ArrayList<Casilla>();\r\n        arrayCasillasOeste.add(new Casilla(\"carcel\", \"especial\", 10, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar6\", \"solar\", 11, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"serv1\", \"servicio\", 12, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar7\", \"solar\", 13, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar8\", \"solar\", 14, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"trans2\", \"transporte\", 15, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar9\", \"solar\", 16, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"caja\", \"caja\", 17, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar10\", \"solar\", 18, 0, banca));\r\n        arrayCasillasOeste.add(new Casilla(\"solar11\", \"solar\", 19, 0, banca));\r\n        posiciones.add(arrayCasillasOeste);\r\n        Grupo violeta = new Grupo(arrayCasillasOeste.get(1),arrayCasillasOeste.get(3), arrayCasillasOeste.get(4), \"PURPLE\");\r\n        grupos.put(\"VIOLETA\", violeta);\r\n        Grupo blanco = new Grupo(arrayCasillasOeste.get(6),arrayCasillasOeste.get(7), arrayCasillasOeste.get(9), \"WHITE\");\r\n        grupos.put(\"BLANCO\", blanco);\r\n    }\r\n\r\n    //Método que inserta las casillas del lado este.\r\n    private void insertarLadoEste() {\r\n        ArrayList<Casilla> arrayCasillasEste = new ArrayList<Casilla>();\r\n        arrayCasillasEste.add(new Casilla(\"ircarcel\",\"especial\",30,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar18\",\"solar\",31,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar19\",\"solar\",32,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"caja\",\"caja\",33,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar20\",\"solar\",34,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"trans4\",\"transporte\",35,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"suerte\",\"suerte\",36,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",37,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"imp2\",38,0,banca));\r\n        arrayCasillasEste.add(new Casilla(\"solar21\",\"solar\",39,0,banca));\r\n        posiciones.add(arrayCasillasEste);\r\n        Grupo verde = new Grupo(arrayCasillasEste.get(1),arrayCasillasEste.get(3), arrayCasillasEste.get(4), \"GREEN\");\r\n        grupos.put(\"VERDE\", verde);\r\n        Grupo azul = new Grupo(arrayCasillasEste.get(6),arrayCasillasEste.get(7),\"BLUE\");\r\n        grupos.put(\"AZUL\", azul);\r\n    }\r\n\r\n    //Para imprimir el tablero, modificamos el método toString().\r\n    @Override\r\n    public String toString(){\r\n        int i;\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\\n\");\r\n        for(Casilla ladonorte:posiciones.get(2)){\r\n            sb.append(\"│\").append(ladonorte.getNombre());\r\n            sb.append(\"      \");\r\n            /*for(Avatar avatar:ladonorte.getAvatares()){\r\n                sb.append(String.format(\"&%s\", avatar.getId())).append(\"|\\n\");\r\n            }*/\r\n            sb.append(\"│\");\r\n        }\r\n        if(posiciones.get(3).get(0).getAvatares() == null ){\r\n        sb.append(String.format(\"│%s   |\\n\", posiciones.get(3).get(0).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"|%s   &%s│\\n\", posiciones.get(3).get(0).getNombre(), posiciones.get(3).get(0).getAvatares()));\r\n        }\r\n        sb.append(\"——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\\n\");\r\n        if(posiciones.get(1).get(9).getAvatares() == null || posiciones.get(3).get(1).getAvatares() == null){\r\n            sb.append(String.format(\"│%s        │\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s        │\\n\", posiciones.get(1).get(9).getNombre(), posiciones.get(3).get(1).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"│%s      &%s│\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s  &%s│\\n\", posiciones.get(1).get(9).getNombre(), posiciones.get(1).get(9).getAvatares(), posiciones.get(3).get(1).getNombre(), posiciones.get(3).get(1).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(8).getAvatares() == null || posiciones.get(3).get(2).getAvatares() == null){\r\n            sb.append(String.format(\"│%s   │\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s  │\\n\", posiciones.get(1).get(8).getNombre(), posiciones.get(3).get(2).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"│%s   &%s│\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s  &%s│\\n\", posiciones.get(1).get(8).getNombre(), posiciones.get(1).get(8).getAvatares(), posiciones.get(3).get(2).getNombre(), posiciones.get(3).get(2).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(7).getAvatares() == null || posiciones.get(3).get(3).getAvatares() == null){\r\n            sb.append(String.format(\"│%s   │\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s  │\\n\", posiciones.get(1).get(7).getNombre(), posiciones.get(3).get(3).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"│%s   &%s│\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s  &%s│\\n\", posiciones.get(1).get(7).getNombre(), posiciones.get(1).get(7).getAvatares(), posiciones.get(3).get(3).getNombre(), posiciones.get(3).get(3).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(6).getAvatares() == null || posiciones.get(3).get(4).getAvatares() == null){\r\n            sb.append(String.format(\"│%s   │\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s  │\\n\", posiciones.get(1).get(6).getNombre(), posiciones.get(3).get(4).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"│%s   &%s│\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  │%s  &%s│\\n\", posiciones.get(1).get(6).getNombre(), posiciones.get(1).get(6).getAvatares(), posiciones.get(3).get(4).getNombre(), posiciones.get(3).get(4).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(5).getAvatares() == null || posiciones.get(3).get(5).getAvatares() == null){\r\n            sb.append(String.format(\"|%s   |\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  |\\n\", posiciones.get(1).get(5).getNombre(), posiciones.get(3).get(5).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"|%s   &%s|\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  &%s|\\n\", posiciones.get(1).get(5).getNombre(), posiciones.get(1).get(5).getAvatares(), posiciones.get(3).get(5).getNombre(), posiciones.get(3).get(5).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(4).getAvatares() == null || posiciones.get(3).get(6).getAvatares() == null){\r\n            sb.append(String.format(\"|%s   |\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  |\\n\", posiciones.get(1).get(4).getNombre(), posiciones.get(3).get(6).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"|%s   &%s|\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  &%s|\\n\", posiciones.get(1).get(4).getNombre(), posiciones.get(1).get(4).getAvatares(), posiciones.get(3).get(6).getNombre(), posiciones.get(3).get(6).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(3).getAvatares() == null || posiciones.get(3).get(7).getAvatares() == null){\r\n            sb.append(String.format(\"|%s   |\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  |\\n\", posiciones.get(1).get(3).getNombre(), posiciones.get(3).get(7).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"|%s   &%s|\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  &%s|\\n\", posiciones.get(1).get(3).getNombre(), posiciones.get(1).get(3).getAvatares(), posiciones.get(3).get(7).getNombre(), posiciones.get(3).get(7).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(2).getAvatares() == null || posiciones.get(3).get(8).getAvatares() == null){\r\n            sb.append(String.format(\"|%s   |\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  |\\n\", posiciones.get(1).get(2).getNombre(), posiciones.get(3).get(8).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"|%s   &%s|\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  &%s|\\n\", posiciones.get(1).get(2).getNombre(), posiciones.get(1).get(2).getAvatares(), posiciones.get(3).get(8).getNombre(), posiciones.get(3).get(8).getAvatares()));\r\n\r\n        }if(posiciones.get(1).get(1).getAvatares() == null || posiciones.get(3).get(9).getAvatares() == null){\r\n            sb.append(String.format(\"|%s   |\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  |\\n\", posiciones.get(1).get(1).getNombre(), posiciones.get(3).get(9).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"|%s   &%s|\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  |%s  &%s|\\n\", posiciones.get(1).get(1).getNombre(), posiciones.get(1).get(1).getAvatares(), posiciones.get(3).get(9).getNombre(), posiciones.get(3).get(9).getAvatares()));\r\n        }\r\n\r\n        sb.append(\"——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\\n\");\r\n\r\n        if(posiciones.get(1).get(0).getAvatares() == null ){\r\n            sb.append(String.format(\"|%s   |\", posiciones.get(1).get(0).getNombre()));\r\n        }else{\r\n            sb.append(String.format(\"|%s   &%s|\", posiciones.get(1).get(0).getNombre(), posiciones.get(1).get(0).getAvatares()));\r\n            }\r\n        \r\n\r\n\r\n\r\n        /*sb.append(String.format(\"|%s|\\t\\t\\t\\t\\t\\t\\t|%s|\\n\", posiciones.get(1).get(0), posiciones.get(3).get(0)));\r\n        sb.append(\"------\\t\\t\\t\\t\\t\\t\\t------\\n\");*/ //NO BORRAR QUE ES PA VER\r\n\r\n        for (i = posiciones.get(0).size() - 1; i >= 0; i--) {\r\n            Casilla ladosur = posiciones.get(0).get(i);\r\n            sb.append(\"|\").append(ladosur.getNombre());\r\n\r\n            sb.append(\"   \");\r\n        }\r\n\r\n        sb.append(\"|\");\r\n        sb.append(\"\\n ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\\n\");\r\n        return sb.toString();\r\n    }\r\n    \r\n    //Método usado para buscar la casilla con el nombre pasado como argumento:\r\n    public Casilla encontrar_casilla(String nombre){\r\n        for(ArrayList<Casilla> lados:posiciones){\r\n            for (Casilla casilla:lados){\r\n                if (nombre.equals(casilla.getNombre())){\r\n                    return casilla;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"No se ha encontrado la casilla\\n\");\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Tablero.java b/monopoly/Tablero.java
--- a/monopoly/Tablero.java	(revision d246b314fa39c90ade5e9e698081c40ff5de6438)
+++ b/monopoly/Tablero.java	(date 1728386662851)
@@ -57,7 +57,7 @@
     //Método para insertar las casillas del lado norte.
     private void insertarLadoNorte() {
         ArrayList<Casilla> arrayCasillasNorte = new ArrayList<Casilla>();
-        arrayCasillasNorte.add(new Casilla("Parking", "especial", 20, banca));
+        arrayCasillasNorte.add(new Casilla("parking", "especial", 20, banca));
         arrayCasillasNorte.add(new Casilla("solar12","solar", 21, 0, banca));
         arrayCasillasNorte.add(new Casilla("suerte", "suerte",22, banca));
         arrayCasillasNorte.add(new Casilla("solar13", "solar",23, 0, banca));
Index: monopoly/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package monopoly;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\nimport partida.*;\r\n\r\npublic class Menu {\r\n\r\n    //Atributos\r\n    private ArrayList<Jugador> jugadores; //Jugadores de la partida.\r\n    private ArrayList<Avatar> avatares; //Avatares en la partida.\r\n    private int turno = 0; //Índice correspondiente a la posición en el arrayList del jugador (y el avatar) que tienen el turno\r\n    private int lanzamientos; //Variable para contar el número de lanzamientos de un jugador en un turno.\r\n    private Tablero tablero; //Tablero en el que se juega.\r\n    private Dado dado1; //Dos dados para lanzar y avanzar casillas.\r\n    private Dado dado2;\r\n    private Jugador banca; //El jugador banca.\r\n    private boolean tirado; //Booleano para comprobar si el jugador que tiene el turno ha tirado o no.\r\n    private boolean solvente; //Booleano para comprobar si el jugador que tiene el turno es solvente, es decir, si ha pagado sus deudas.\r\n    private boolean dadosdobles;\r\n\r\n    public Menu(){\r\n        this.jugadores = new ArrayList<Jugador>();\r\n        this.avatares = new ArrayList<Avatar>();\r\n        this.banca = new Jugador();\r\n        this.tablero = new Tablero(banca);\r\n        this.dado1 = new Dado();\r\n        this.dado2 = new Dado();\r\n        iniciarPartida();\r\n    }\r\n\r\n    public ArrayList<Jugador> getJugadores(){\r\n        return jugadores;\r\n    }\r\n\r\n    public void setJugadores(ArrayList<Jugador> jugadores){\r\n        this.jugadores = jugadores;\r\n    }\r\n\r\n    public ArrayList<Avatar> getAvatares(){\r\n        return avatares;\r\n    }\r\n\r\n    public void setAvatares(ArrayList<Avatar> avatares){\r\n        this.avatares = avatares;\r\n    }\r\n\r\n    public int getTurno(){\r\n        return turno;\r\n    }\r\n\r\n    public void setTurno(int turno){\r\n        this.turno = turno;\r\n    }\r\n\r\n    public int getLanzamientos(){\r\n        return lanzamientos;\r\n    }\r\n\r\n    public void setLanzamientos(int lanzamientos){\r\n        this.lanzamientos = lanzamientos;\r\n    }\r\n\r\n    public Tablero getTablero(){\r\n        return tablero;\r\n    }\r\n\r\n    public void setTablero(Tablero tablero){\r\n        this.tablero = tablero;\r\n    }\r\n\r\n    public Dado getDado1(){\r\n        return dado1;\r\n    }\r\n\r\n    public void setDado1(Dado dado1){\r\n        this.dado1 = dado1;\r\n    }\r\n\r\n    public Dado getDado2(){\r\n        return dado2;\r\n    }\r\n\r\n    public void setDado2(Dado dado2){\r\n        this.dado2 = dado2;\r\n    }\r\n\r\n    public Jugador getBanca(){\r\n        return banca;\r\n    }\r\n\r\n    public void setBanca(Jugador banca){\r\n        this.banca = banca;\r\n    }\r\n\r\n    public boolean getTirado(){\r\n        return tirado;\r\n    }\r\n\r\n    public void setTirado(boolean tirado){\r\n        this.tirado = tirado;\r\n    }\r\n\r\n    public boolean getSolvente(){\r\n        return solvente;\r\n    }\r\n\r\n    public void setSolvente(boolean solvente){\r\n        this.solvente = solvente;\r\n    }\r\n\r\n    public boolean getDadosdobles(){\r\n        return dadosdobles;\r\n    }\r\n\r\n    public void setDadosdobles(boolean dadosdobles){\r\n        this.dadosdobles = dadosdobles;\r\n    }\r\n\r\n    // Método para inciar una partida: crea los jugadores y avatares.\r\n    private void iniciarPartida() {\r\n    \r\n    while (true) {\r\n        \r\n    \r\n        Scanner scanner = new Scanner(System.in);\r\n        String comando = scanner.nextLine();\r\n        analizarComando(comando);\r\n        \r\n    }\r\n}\r\n    \r\n    /*Método que interpreta el comando introducido y toma la accion correspondiente.\r\n    * Parámetro: cadena de caracteres (el comando).\r\n    */\r\n    private void analizarComando(String comando) {\r\n        \r\n    String[] palabras = comando.split(\" \");\r\n\r\n    // Si no hay palabras suficientes, no es un comando válido\r\n    if (palabras.length < 1) {\r\n        System.out.println(\"Comando inválido.\");\r\n    }\r\n\r\n    String metodo = palabras[0];\r\n\r\n    switch (metodo) {\r\n        case \"crear\":\r\n            if (palabras.length >= 4 && palabras[1].equals(\"jugador\")) {\r\n                String nombre = palabras[2];\r\n                String tipoAvatar = palabras[3];\r\n                Jugador jugador= new Jugador(nombre, tipoAvatar, tablero.getPosiciones().get(0).get(0), avatares);\r\n                jugadores.add(jugador);\r\n                System.out.println(\"Jugador creado con éxito.\\n\");\r\n            } else {\r\n                System.out.println(\"Comando incompleto o incorrecto para crear jugador.\\n\");\r\n            }\r\n            break;\r\n        case \"jugador\":\r\n            System.out.println(jugadores.get(turno).getNombre());\r\n            System.out.println(jugadores.get(turno).getAvatar());\r\n            break;\r\n        case \"listar\":\r\n            if (palabras.length == 2) {\r\n                if (palabras[1].equals(\"jugadores\")) {\r\n                    listarJugadores();\r\n                } else if (palabras[1].equals(\"avatares\")) {\r\n                    listarAvatares();\r\n                } else {\r\n                    System.out.println(\"Error, comando desconocido.\\n\");\r\n                }\r\n            } else {\r\n                System.out.println(\"Error, comando desconocido.\\n\");\r\n            }\r\n            break;\r\n        case \"lanzar\":\r\n            if (palabras.length == 2 && palabras[1].equals(\"dados\")) {\r\n                lanzarDados();\r\n            } else {\r\n                System.out.println(\"Error, comando desconocido.\\n\");\r\n            }\r\n            break;\r\n        case \"acabar\":\r\n            if (palabras.length == 2 && palabras[1].equals(\"turno\")) {\r\n                acabarTurno();\r\n            } else {\r\n                System.out.println(\"Error, comando desconocido.\\n\");\r\n            }\r\n            break;\r\n        case \"salir\":\r\n            if (palabras.length == 2 && palabras[1].equals(\"carcel\")) {\r\n                salirCarcel();\r\n            } else {\r\n                System.out.println(\"Error, comando desconocido.\\n\");\r\n            }\r\n            break;\r\n        case \"describir\":\r\n            if (palabras.length == 2) {\r\n                String nombreCasilla = palabras[1];\r\n                descCasilla(nombreCasilla);\r\n            }else if(palabras.length == 3){\r\n                if(palabras[1].equals(\"jugador\")){\r\n                    String[] nombreJugador = new String[]{palabras[2]};\r\n                    descJugador(nombreJugador);\r\n                }else if(palabras[1].equals(\"avatar\")){\r\n                    String[] idAvatar = new String[]{palabras[2]};\r\n                    descAvatar(idAvatar);\r\n                }\r\n            }else {\r\n                System.out.println(\"Error, comando desconocido.\\n\");\r\n            }\r\n            break;\r\n        case \"comprar\":\r\n            if (palabras.length == 2) {\r\n                String nombreCasilla = palabras[1];\r\n                comprar(nombreCasilla);\r\n            } else {\r\n                System.out.println(\"Error, comando desconocido.\\n\");\r\n            }\r\n            break;\r\n        case \"listar enventa\":\r\n            listarVenta();\r\n            break;\r\n        case \"ver\":\r\n            System.out.println(tablero.toString());\r\n            break;\r\n\r\n        default:\r\n            System.out.println(\"Error, comando desconocido.\\n\");\r\n            break;\r\n    }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir jugador'.\r\n    * Parámetro: comando introducido\r\n     */\r\n    private void descJugador(String[] palabras) {\r\n        for(Jugador jugador:jugadores){\r\n            if((jugador.getNombre()).equals(palabras[2])){\r\n                System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*Método que realiza las acciones asociadas al comando 'describir avatar'.\r\n    * Parámetro: id del avatar a describir.\r\n    */\r\n    private void descAvatar(String[] palabras) {\r\n        for(Avatar avatar:avatares){\r\n            if((avatar.getId()).equals(palabras[2])){\r\n                System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + avatar.getLugar() + \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Método que realiza las acciones asociadas al comando 'describir nombre_casilla'.\r\n    * Parámetros: nombre de la casilla a describir.\r\n    */\r\n    private void descCasilla(String nombre) {\r\n        Casilla casilla = tablero.encontrar_casilla(nombre);\r\n        System.out.println(casilla); //tengo la funcion hecha en Casilla.java\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'lanzar dados'.\r\n    private void lanzarDados() {\r\n        if (getTirado()) {\r\n            System.out.println(\"Ya has lanzado los dados en este turno.\");\r\n            return;\r\n        }\r\n        \r\n        dado1.hacerTirada();\r\n        dado2.hacerTirada();\r\n\r\n        System.out.println(\"Dado 1: \" + dado1.getValor());\r\n        System.out.println(\"Dado 2: \" + dado2.getValor());\r\n\r\n        int sumaDados = dado1.getValor() + dado2.getValor();\r\n        setDadosdobles(dado1.equals(dado2));\r\n\r\n    \r\n        if (jugadores.get(turno).getEnCarcel()) {\r\n            if (getDadosdobles()) {\r\n                System.out.println(\"Has sacado dobles y sales de la cárcel.\");\r\n                jugadores.get(turno).setEnCarcel(false);\r\n            } else {\r\n                jugadores.get(turno).setTiradasCarcel(jugadores.get(turno).getTiradasCarcel() + 1);\r\n                    if (jugadores.get(turno).getTiradasCarcel() >= 3) {\r\n                        System.out.println(\"Has fallado 3 veces.\");\r\n                        jugadores.get(turno).setEnCarcel(false); // Sale de la cárcel después de pagar\r\n                    }\r\n                setTirado(true);\r\n                return;\r\n        }\r\n    }\r\n\r\n    \r\n    Avatar avatarActual = jugadores.get(turno).getAvatar();\r\n    avatarActual.moverAvatar(tablero.getPosiciones(), sumaDados);\r\n\r\n    // Verificar si el jugador ha dado la vuelta al tablero\r\n    if (avatarActual.getLugar().getPosicion() < sumaDados) {\r\n        if(avatarActual.getLugar().getNombre().equals(\"ircarcel\")){\r\n            System.out.println(\"Has caído en la carcel.\\n\");\r\n            jugadores.get(turno).encarcelar(tablero.getPosiciones());\r\n            jugadores.get(turno).setEnCarcel(true);\r\n        }else{\r\n            jugadores.get(turno).setVueltas(jugadores.get(turno).getVueltas() + 1);\r\n            System.out.println(\"¡Has pasado por la casilla de salida! Recibes tu recompensa.\\n\");\r\n            jugadores.get(turno).sumarFortuna(200); // Suponiendo que reciben 200 por pasar la salida\r\n        }\r\n    }\r\n\r\n    // Evaluar la casilla en la que ha caído\r\n    // Aquí puedes incluir la lógica para evaluar la casilla (si es propiedad, pagar renta, etc.)\r\n\r\n    setTirado(true); // El jugador ya ha lanzado los dados en este turno\r\n\r\n    // Si sacó dobles, puede volver a tirar\r\n    if (getDadosdobles()) {\r\n        System.out.println(\"Has sacado dobles, puedes lanzar de nuevo.\");\r\n        setTirado(false); // Permitir volver a tirar\r\n        setLanzamientos(getLanzamientos()+1);\r\n\r\n        // Si sacó dobles 3 veces, va a la cárcel\r\n        if (getLanzamientos() == 3) {\r\n            System.out.println(\"Has sacado dobles 3 veces seguidas, vas a la cárcel.\");\r\n            jugadores.get(turno).encarcelar(tablero.getPosiciones());\r\n            setTirado(true);\r\n        }\r\n    } else {\r\n        setLanzamientos(0); // Resetear el contador de lanzamientos dobles\r\n    }\r\n}\r\n\r\n    /*Método que ejecuta todas las acciones realizadas con el comando 'comprar nombre_casilla'.\r\n    * Parámetro: cadena de caracteres con el nombre de la casilla.\r\n     */\r\n    private void comprar(String nombre) {\r\n        jugadores.get(turno).setFortuna(jugadores.get(turno).getFortuna() - tablero.encontrar_casilla(nombre).getValor());\r\n        jugadores.get(turno).anhadirPropiedad(tablero.encontrar_casilla(nombre));\r\n        tablero.encontrar_casilla(nombre).setDuenho(jugadores.get(turno));\r\n        System.out.println(\"Casilla comprada con éxito.\\n\");\r\n    }\r\n\r\n    //Método que ejecuta todas las acciones relacionadas con el comando 'salir carcel'. \r\n    private void salirCarcel() {\r\n        jugadores.get(turno).setEnCarcel(false);\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar enventa'.\r\n    private void listarVenta() {\r\n        int i;\r\n        StringBuilder sb = new StringBuilder();\r\n\r\n        for(i = 0; i < 4; i++){\r\n            for(Casilla casilla:tablero.getPosiciones().get(i)){\r\n                if(casilla.getDuenho().getNombre().equals(\"banca\")){\r\n                    if(casilla.getTipo().equals(\"solar\")){\r\n                        sb.append(String.format(\"{\\n tipo: %s,\\n\", casilla.getTipo()));\r\n                        sb.append(String.format(\"{\\n grupo: %s,\\n\", casilla.getGrupo().getColorGrupo()));\r\n                        sb.append(String.format(\"{\\n valor: %s,\\n\", casilla.getValor()));\r\n                        sb.append(\"},\\n\");\r\n                    }else{\r\n                        sb.append(String.format(\"{\\n tipo: %s,\\n\", casilla.getTipo()));\r\n                        sb.append(String.format(\"{\\n valor: %s,\\n\", casilla.getValor()));\r\n                        sb.append(\"},\\n\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        System.out.println(sb.toString());\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar jugadores'.\r\n    private void listarJugadores() {\r\n        for(Jugador jugador:jugadores){\r\n            System.out.println(\"{\\nnombre: \" + jugador.getNombre() + \",\\navatar: \" + jugador.getAvatar() + \",\\nfortuna: \" + jugador.getFortuna() + \",\\npropiedades: \" + jugador.getPropiedades() + \"\\nhipotecas: []\" + \"\\nedificios: []\" + \"\\n}\\n\");\r\n        }\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'listar avatares'.\r\n    private void listarAvatares() {\r\n        for(Avatar avatar:avatares){\r\n            System.out.println(\"{\\nid: \" + avatar.getId() + \",\\ntipo: \" + avatar.getTipo() + \",\\ncasilla: \" + avatar.getLugar() + \",\\njugador: \" + avatar.getJugador() + \"\\n}\\n\");\r\n        }\r\n    }\r\n\r\n    // Método que realiza las acciones asociadas al comando 'acabar turno'.\r\n    private void acabarTurno() {\r\n        \r\n        turno++;\r\n\r\n        if (turno>jugadores.size()-1) {\r\n            turno=0;\r\n        }\r\n\r\n        setTirado(false);\r\n        setLanzamientos(0);\r\n        setDadosdobles(false);\r\n        if (jugadores.get(turno).getFortuna()<0) {\r\n            setSolvente(false);\r\n        }else{\r\n            setSolvente(false);\r\n        }\r\n\r\n        System.out.println(\"El turno actual será de:\" + jugadores.get(turno+1).getNombre());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/monopoly/Menu.java b/monopoly/Menu.java
--- a/monopoly/Menu.java	(revision d246b314fa39c90ade5e9e698081c40ff5de6438)
+++ b/monopoly/Menu.java	(date 1728387369632)
@@ -219,7 +219,7 @@
                 System.out.println("Error, comando desconocido.\n");
             }
             break;
-        case "listar enventa":
+        case "listarenventa":
             listarVenta();
             break;
         case "ver":
@@ -237,8 +237,8 @@
      */
     private void descJugador(String[] palabras) {
         for(Jugador jugador:jugadores){
-            if((jugador.getNombre()).equals(palabras[2])){
-                System.out.println("{\nnombre: " + jugador.getNombre() + ",\navatar: " + jugador.getAvatar() + ",\nfortuna: " + jugador.getFortuna() + ",\npropiedades: " + jugador.getPropiedades() + "\nhipotecas: []" + "\nedificios: []" + "\n}\n");
+            if((jugador.getNombre()).equals(palabras[0])){
+                System.out.println("{\nnombre: " + jugador.getNombre() + ",\navatar: " + jugador.getAvatar().getId() + ",\nfortuna: " + jugador.getFortuna() + ",\npropiedades: " + jugador.getPropiedades() + "\nhipotecas: []" + "\nedificios: []" + "\n}\n");
             }
         }
     }
@@ -248,7 +248,7 @@
     */
     private void descAvatar(String[] palabras) {
         for(Avatar avatar:avatares){
-            if((avatar.getId()).equals(palabras[2])){
+            if((avatar.getId()).equals(palabras[0])){
                 System.out.println("{\nid: " + avatar.getId() + ",\ntipo: " + avatar.getTipo() + ",\ncasilla: " + avatar.getLugar() + ",\njugador: " + avatar.getJugador() + "\n}\n");
             }
         }
@@ -375,7 +375,7 @@
     // Método que realiza las acciones asociadas al comando 'listar jugadores'.
     private void listarJugadores() {
         for(Jugador jugador:jugadores){
-            System.out.println("{\nnombre: " + jugador.getNombre() + ",\navatar: " + jugador.getAvatar() + ",\nfortuna: " + jugador.getFortuna() + ",\npropiedades: " + jugador.getPropiedades() + "\nhipotecas: []" + "\nedificios: []" + "\n}\n");
+            System.out.println("{\nnombre: " + jugador.getNombre() + ",\navatar: " + jugador.getAvatar().getId() + ",\nfortuna: " + jugador.getFortuna() + ",\npropiedades: " + jugador.getPropiedades() + "\nhipotecas: []" + "\nedificios: []" + "\n}\n");
         }
     }
 
Index: out/production/Trabajo_Poo/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"05c7bc73-9af0-48dd-a707-1a4d634f1589\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/monopoly/Tablero.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/monopoly/Tablero.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;Nicofs04&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/Nicofs04/Trabajo_Poo.git&quot;,\n    &quot;accountId&quot;: &quot;f77c096a-7efc-4be3-bbc2-44ff770b31d4&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 6\n}</component>\n  <component name=\"ProjectId\" id=\"2msUgAFCuL7KPi1ejqWAxBLqfro\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.MonopolyETSE.executor&quot;: &quot;Debug&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/nico/Escritorio/Trabajo_Poo&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration name=\"MonopolyETSE\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"monopoly.MonopolyETSE\" />\n      <module name=\"Trabajo_Poo\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"monopoly.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.MonopolyETSE\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"05c7bc73-9af0-48dd-a707-1a4d634f1589\" name=\"Changes\" comment=\"\" />\n      <created>1727864886315</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1727864886315</updated>\n      <workItem from=\"1727864888569\" duration=\"7233000\" />\n      <workItem from=\"1728052391712\" duration=\"4631000\" />\n      <workItem from=\"1728079708136\" duration=\"2123000\" />\n      <workItem from=\"1728125695940\" duration=\"18303000\" />\n      <workItem from=\"1728235989078\" duration=\"6127000\" />\n      <workItem from=\"1728246064679\" duration=\"517000\" />\n      <workItem from=\"1728284700542\" duration=\"2902000\" />\n      <workItem from=\"1728308465862\" duration=\"349000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"origin/main\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/main\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/Trabajo_Poo/.idea/workspace.xml b/out/production/Trabajo_Poo/.idea/workspace.xml
--- a/out/production/Trabajo_Poo/.idea/workspace.xml	(revision d246b314fa39c90ade5e9e698081c40ff5de6438)
+++ b/out/production/Trabajo_Poo/.idea/workspace.xml	(date 1728384121579)
@@ -5,7 +5,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="05c7bc73-9af0-48dd-a707-1a4d634f1589" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/monopoly/Tablero.java" beforeDir="false" afterPath="$PROJECT_DIR$/monopoly/Tablero.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/monopoly/Casilla.java" beforeDir="false" afterPath="$PROJECT_DIR$/monopoly/Casilla.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Trabajo_Poo/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Trabajo_Poo/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Trabajo_Poo/monopoly/Tablero.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Trabajo_Poo/partida/Jugador.class" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -99,7 +102,8 @@
       <workItem from="1728235989078" duration="6127000" />
       <workItem from="1728246064679" duration="517000" />
       <workItem from="1728284700542" duration="2902000" />
-      <workItem from="1728308465862" duration="349000" />
+      <workItem from="1728308465862" duration="5783000" />
+      <workItem from="1728383336381" duration="638000" />
     </task>
     <servers />
   </component>
@@ -144,4 +148,15 @@
       </map>
     </option>
   </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>jar://$USER_HOME$/.jdks/corretto-21.0.4/lib/src.zip!/java.base/jdk/internal/util/Preconditions.java</url>
+          <line>301</line>
+          <option name="timeStamp" value="4" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
 </project>
\ No newline at end of file
